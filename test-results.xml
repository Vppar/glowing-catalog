<?xml version="1.0"?>
<testsuites>
  <testsuite name="PhantomJS 1.9.7 (Windows 7)" package="" timestamp="2014-06-05T14:37:25" id="0" hostname="NOTE-1TM20Y1" tests="1065" errors="0" failures="0" time="0.029">
    <properties>
      <property name="browser.fullName" value="Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.34 (KHTML, like Gecko) PhantomJS/1.9.7 Safari/534.34"/>
    </properties>
    <testcase name="does not change final date when initial date is set to an earlier date" time="0" classname="PhantomJS 1.9.7 (Windows 7).date-range">
      <skipped/>
    </testcase>
    <testcase name="does not change initial date when final date is set to a later date" time="0" classname="PhantomJS 1.9.7 (Windows 7).date-range">
      <skipped/>
    </testcase>
    <testcase name="changes final date to same value as initial date when a later initial date is selected" time="0" classname="PhantomJS 1.9.7 (Windows 7).date-range">
      <skipped/>
    </testcase>
    <testcase name="changes initial date to same value as final date when an earlier final date is selected" time="0" classname="PhantomJS 1.9.7 (Windows 7).date-range">
      <skipped/>
    </testcase>
    <testcase name="limits value by the &quot;min&quot; attribute" time="0" classname="PhantomJS 1.9.7 (Windows 7).date-range">
      <skipped/>
    </testcase>
    <testcase name="limits value by the &quot;max&quot; attribute" time="0" classname="PhantomJS 1.9.7 (Windows 7).date-range">
      <skipped/>
    </testcase>
    <testcase name="sets the values in the object passed to the &quot;ng-model&quot; attribute" time="0" classname="PhantomJS 1.9.7 (Windows 7).date-range">
      <skipped/>
    </testcase>
    <testcase name="initializes with values in the object passed to the &quot;ng-model&quot;" time="0" classname="PhantomJS 1.9.7 (Windows 7).date-range">
      <skipped/>
    </testcase>
    <testcase name="renders two date input fields" time="0" classname="PhantomJS 1.9.7 (Windows 7).date-range">
      <skipped/>
    </testcase>
    <testcase name="disables initial date field when its value is set to &quot;-1&quot;" time="0" classname="PhantomJS 1.9.7 (Windows 7).date-range">
      <skipped/>
    </testcase>
    <testcase name="disables final date field when its value is set to &quot;-1&quot;" time="0" classname="PhantomJS 1.9.7 (Windows 7).date-range">
      <skipped/>
    </testcase>
    <testcase name="changeToDeposit should call the changeState for the selected checks" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: receivable-check">
      <skipped/>
    </testcase>
    <testcase name="changeToDeposit should call the changeState for the selected checks, but fail" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: receivable-check">
      <skipped/>
    </testcase>
    <testcase name="expect watcher to set the proper values for selected = toDeposit" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: receivable-check-watchers">
      <skipped/>
    </testcase>
    <testcase name="expect watcher to set the proper values for selected = deposited" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: receivable-check-watchers">
      <skipped/>
    </testcase>
    <testcase name="expect watcher to set the proper values for selected = moneyReceived" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: receivable-check-watchers">
      <skipped/>
    </testcase>
    <testcase name="expect watcher to set the proper values for selected = returned" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: receivable-check-watchers">
      <skipped/>
    </testcase>
    <testcase name="expect watcher to set the proper values for selected = all" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: receivable-check-watchers">
      <skipped/>
    </testcase>
    <testcase name="expect watcher to set the proper values for allChecks = true" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: receivable-check-watchers">
      <skipped/>
    </testcase>
    <testcase name="expect watcher to call the filters" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: receivable-check-watchers">
      <skipped/>
    </testcase>
    <testcase name="expect watcher to call the filters" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: receivable-check-watchers">
      <skipped/>
    </testcase>
    <testcase name="should load the emails" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerEmailsDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should add email" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerEmailsDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t add email" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerEmailsDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t add email" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerEmailsDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should move email address up" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerEmailsDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should move email address down down" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerEmailsDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should remove email" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerEmailsDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should cancel add emails" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerEmailsDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should confirm add emails" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerEmailsDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should enable the *salvar* button" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerEmailsDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should enable the *salvar* button" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerEmailsDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t enable the *salvar* button" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerEmailsDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t enable the *salvar* button" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerEmailsDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should load the phoneTypes" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerPhonesDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should load the phones" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerPhonesDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should add phone" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerPhonesDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t add phone" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerPhonesDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t add phone" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerPhonesDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should move phone number up" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerPhonesDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should move phone down down" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerPhonesDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should remove phone" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerPhonesDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should cancel add phones" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerPhonesDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should confirm add phones" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerPhonesDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should enable the *salvar* button, 10 characters number, empty list" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerPhonesDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should enable the *salvar* button, 10 characters number, already populated list" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerPhonesDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should enable the *salvar* button, 11 characters number" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerPhonesDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should enable the *salvar* button, empty input, list with at least one phone " time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerPhonesDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t enable the *salvar* button, phones list &gt; 0, input with invalid number" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerPhonesDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should have days and months filled" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerCtrl">
      <skipped/>
    </testcase>
    <testcase name="should have states filled" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerCtrl">
      <skipped/>
    </testcase>
    <testcase name="should add a customer" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerCtrl">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t add a customer" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerCtrl">
      <skipped/>
    </testcase>
    <testcase name="should cancel add a customer" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerCtrl">
      <skipped/>
    </testcase>
    <testcase name="should validate the cpf" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerCtrl">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t try to validate the cpf" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerCtrl">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t validate the cpf" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerCtrl">
      <skipped/>
    </testcase>
    <testcase name="should get the CEP" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: AddCustomerCtrl">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).ChangePassDialogCtrl $scope_changePassword()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).ChangePassDialogCtrl $scope_changePassword()">
      <skipped/>
    </testcase>
    <testcase name="does NOT change the password if the form is not valid" time="0" classname="PhantomJS 1.9.7 (Windows 7).ChangePassDialogCtrl $scope_changePassword()">
      <skipped/>
    </testcase>
    <testcase name="shows a message if the form is not valid" time="0" classname="PhantomJS 1.9.7 (Windows 7).ChangePassDialogCtrl $scope_changePassword()">
      <skipped/>
    </testcase>
    <testcase name="tries to change the password if the form is valid" time="0" classname="PhantomJS 1.9.7 (Windows 7).ChangePassDialogCtrl $scope_changePassword()">
      <skipped/>
    </testcase>
    <testcase name="passes the right data to the change password function" time="0" classname="PhantomJS 1.9.7 (Windows 7).ChangePassDialogCtrl $scope_changePassword()">
      <skipped/>
    </testcase>
    <testcase name="shows a message if the password was successfully changed" time="0" classname="PhantomJS 1.9.7 (Windows 7).ChangePassDialogCtrl $scope_changePassword()">
      <skipped/>
    </testcase>
    <testcase name="shows PROPER proper message if the wrong password is passed" time="0" classname="PhantomJS 1.9.7 (Windows 7).ChangePassDialogCtrl $scope_changePassword() error message handling">
      <skipped/>
    </testcase>
    <testcase name="shows PROPER proper message if not connected to Firebase" time="0" classname="PhantomJS 1.9.7 (Windows 7).ChangePassDialogCtrl $scope_changePassword() error message handling">
      <skipped/>
    </testcase>
    <testcase name="shows PROPER proper message if password is not safe enough" time="0" classname="PhantomJS 1.9.7 (Windows 7).ChangePassDialogCtrl $scope_changePassword() error message handling">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t have a customer selected" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: ChooseCustomerDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should close the dialog without select a customer" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: ChooseCustomerDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should pass the customer id to dialog.close()" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: ChooseCustomerDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should close the dialog and redirect to new customer" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: ChooseCustomerDialogCtrl">
      <skipped/>
    </testcase>
    <testcase name="should redirect to payment" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: HeaderCtrl">
      <skipped/>
    </testcase>
    <testcase name="should open choose customer dialog" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: HeaderCtrl">
      <skipped/>
    </testcase>
    <testcase name="sets the customerID from choose customer dialog" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: HeaderCtrl">
      <skipped/>
    </testcase>
    <testcase name="should warn about no product" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: HeaderCtrl">
      <skipped/>
    </testcase>
    <testcase name="controller is accessible." time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller:HeaderCtrl When create controller_">
      <skipped/>
    </testcase>
    <testcase name="should redirect to login page when UserService logout properly." time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller:HeaderCtrl When logout is trigger">
      <skipped/>
    </testcase>
    <testcase name="should redirect to login page when UserServcice can&apos;t logout" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller:HeaderCtrl When logout is trigger">
      <skipped/>
    </testcase>
    <testcase name="controller is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller : LoginCtrl When create controller">
      <skipped/>
    </testcase>
    <testcase name="should redirect to mainPage when UserServcice accept credentials" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller : LoginCtrl When login is triggered">
      <skipped/>
    </testcase>
    <testcase name="should show messageDialog when UserServcice denied credentials" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller : LoginCtrl When login is triggered">
      <skipped/>
    </testcase>
    <testcase name="should consolidate orders by clients." time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: order-list-clients">
      <skipped/>
    </testcase>
    <testcase name="should consolidate orders by clients." time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: order-list-products">
      <skipped/>
    </testcase>
    <testcase name="should verify if user is logged in" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: order-list When instantiate controller">
      <skipped/>
    </testcase>
    <testcase name="should instantiate dateFilter properly" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: order-list When instantiate controller">
      <skipped/>
    </testcase>
    <testcase name="should have 4 orders in the list" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: order-list When instantiate controller">
      <skipped/>
    </testcase>
    <testcase name="should reset recevaibles total by type" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: order-list When resetPaymentsTotal and resetOrdersTotal is triggered">
      <skipped/>
    </testcase>
    <testcase name="should reset order totals" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: order-list When resetPaymentsTotal and resetOrdersTotal is triggered">
      <skipped/>
    </testcase>
    <testcase name="should updateReceivablesTotal calculate properly the receivables by type" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: order-list When resetPaymentsTotal and resetOrdersTotal is triggered">
      <skipped/>
    </testcase>
    <testcase name="should updateReceivablesTotal calculate properly the receivable by type" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: order-list When resetPaymentsTotal and resetOrdersTotal is triggered">
      <skipped/>
    </testcase>
    <testcase name="should calculate properly the orders totals" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: order-list When resetPaymentsTotal and resetOrdersTotal is triggered">
      <skipped/>
    </testcase>
    <testcase name="should argument properly order with itemsQty, avgPrice, amountTotal, avgOrder" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: order-list When resetPaymentsTotal and resetOrdersTotal is triggered">
      <skipped/>
    </testcase>
    <testcase name="should filter orders by date" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: order-list When resetPaymentsTotal and resetOrdersTotal is triggered When date filter change">
      <skipped/>
    </testcase>
    <testcase name="should add a check payment" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCheckCtrlAdd">
      <skipped/>
    </testcase>
    <testcase name="should add a check payment with installments" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCheckCtrlAdd">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t add a check payment with invalid form" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCheckCtrlAdd">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t add a repeated check payment" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCheckCtrlAdd">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t add a check with amount 0" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCheckCtrlAdd">
      <skipped/>
    </testcase>
    <testcase name="should confirm the payments" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCheckCtrlConfirmChecks">
      <skipped/>
    </testcase>
    <testcase name="should remove a check payment" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCheckCtrlRemove">
      <skipped/>
    </testcase>
    <testcase name="Should calculate totals - qty=5 " time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCouponCtrl">
      <skipped/>
    </testcase>
    <testcase name="Should calculate totals - qty=23. " time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCouponCtrl">
      <skipped/>
    </testcase>
    <testcase name="should load coupons quantities from PaymentService.persistedCoupons" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCouponCtrl">
      <skipped/>
    </testcase>
    <testcase name="persists coupons in PaymentService" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCouponCtrl confirmCoupons()">
      <skipped/>
    </testcase>
    <testcase name="should not create any coupon " time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCouponCtrl">
      <skipped/>
    </testcase>
    <testcase name="should not populate the item list of the order service with a voucher if the list does contains a voucher" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCouponCtrl">
      <skipped/>
    </testcase>
    <testcase name="should  populate the item list of the order service with a voucher if the list does not contains a voucher" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCouponCtrl">
      <skipped/>
    </testcase>
    <testcase name="should populate the item list of the order service with a giftcard" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCouponCtrl">
      <skipped/>
    </testcase>
    <testcase name="should not allow to confirm if the voucher value is zero" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCouponCtrl">
      <skipped/>
    </testcase>
    <testcase name="allows to remove an existing voucher by setting the value to 0" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCouponCtrl">
      <skipped/>
    </testcase>
    <testcase name="should allow to confirm if the voucher value is different than zero" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCouponCtrl">
      <skipped/>
    </testcase>
    <testcase name="should allow to confirm if the voucher value is almost zero" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCouponCtrl">
      <skipped/>
    </testcase>
    <testcase name="should allow to confirm if the gift value is different than zero and customer is defined" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCouponCtrl">
      <skipped/>
    </testcase>
    <testcase name="should not allow to confirm if the gift value is zero" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCouponCtrl">
      <skipped/>
    </testcase>
    <testcase name="should not allow to confirm if the gift customer name is not defined" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCouponCtrl">
      <skipped/>
    </testcase>
    <testcase name="allows to confirm if total value of coupons is 0 and there are persisted coupons" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCouponCtrl">
      <skipped/>
    </testcase>
    <testcase name="should not allow to confirm if the total value of coupons is equals or less than zero" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCouponCtrl">
      <skipped/>
    </testcase>
    <testcase name="should allow to confirm if the total value of coupons is greater than zero" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCouponCtrl">
      <skipped/>
    </testcase>
    <testcase name="should populate the item list of the order service with a voucher" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCouponCtrl">
      <skipped/>
    </testcase>
    <testcase name="should add a credit card payment" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCreditCardCtrl">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t add a credit card payment with invalid form" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCreditCardCtrl">
      <skipped/>
    </testcase>
    <testcase name="is 0 if change is positive" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCreditCardCtrl initial amount value">
      <skipped/>
    </testcase>
    <testcase name="is the absolute value of change if change is negative" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCreditCardCtrl initial amount value">
      <skipped/>
    </testcase>
    <testcase name="is 0 if change is falsy" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentCreditCardCtrl initial amount value">
      <skipped/>
    </testcase>
    <testcase name="should add exchanges to payment exchanges" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentExchangeCtrlConfirm">
      <skipped/>
    </testcase>
    <testcase name="should clear old exchanges before add confirmed exchanges" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentExchangeCtrlConfirm">
      <skipped/>
    </testcase>
    <testcase name="should add an exchange to the list" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentExchangeCtrl">
      <skipped/>
    </testcase>
    <testcase name="should increment the index when add a value to the exchanges list" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentExchangeCtrl">
      <skipped/>
    </testcase>
    <testcase name="should add a correct value to the exchanges list" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentExchangeCtrl">
      <skipped/>
    </testcase>
    <testcase name="should call OnCuffPaymentService.buildInstallments" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrlBuildInstallmentsSpec
 Given a controller execution context
 and a valid onCuffRef object 
 When buildInstallments is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call OnCuffPaymentService.buildInstallments" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrlConfirmSpec
 Given a controller execution context
 and a valid newVal different to the oldVal 
 When duedateWatcherCallback is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should update onCuff.installments" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrlConfirmSpec
 Given a controller execution context
 and a valid newVal different to the oldVal 
 When duedateWatcherCallback is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call OnCuffPaymentService.buildInstallments" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrlDuedateWatcherCallBackSpec
 Given a controller execution context
 and a valid newVal different to the oldVal 
 When duedateWatcherCallback is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should update onCuff.installments" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrlDuedateWatcherCallBackSpec
 Given a controller execution context
 and a valid newVal different to the oldVal 
 When duedateWatcherCallback is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t call PaymentOnCuffCtrl.buildInstallments" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrlDuedateWatcherCallBackSpec
 Given a controller execution context
 and a valid newVal equal to the oldVal 
 When duedateWatcherCallback is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should left onCuff.installments untouched" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrlDuedateWatcherCallBackSpec
 Given a controller execution context
 and a valid newVal equal to the oldVal 
 When duedateWatcherCallback is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t call PaymentOnCuffCtrl.buildInstallments" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrlDuedateWatcherCallBackSpec
 Given a controller execution context
 and a invalid newVal 
 When duedateWatcherCallback is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should left onCuff.installments untouched" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrlDuedateWatcherCallBackSpec
 Given a controller execution context
 and a invalid newVal 
 When duedateWatcherCallback is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call OnCuffPaymentService.buildInstallments" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrlNumberOfInstallmentsWatcherCallBackSpec
 Given a controller execution context
 and a valid newVal different to the oldVal 
 When numberOfInstallmentsWatcherCallback is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should update onCuff.installments" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrlNumberOfInstallmentsWatcherCallBackSpec
 Given a controller execution context
 and a valid newVal different to the oldVal 
 When numberOfInstallmentsWatcherCallback is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t call PaymentOnCuffCtrl.buildInstallments" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrlNumberOfInstallmentsWatcherCallBackSpec
 Given a controller execution context
 and a valid newVal equal to the oldVal 
 When numberOfInstallmentsWatcherCallback is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should left onCuff.installments untouched" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrlNumberOfInstallmentsWatcherCallBackSpec
 Given a controller execution context
 and a valid newVal equal to the oldVal 
 When numberOfInstallmentsWatcherCallback is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call OnCuffPaymentService.buildInstallments" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrlRecalcSpec
 Given a controller execution context
 and a valid newVal different to the oldVal 
 When duedateWatcherCallback is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should allow entrance" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrlShoudOpenSpec
 Given a controller execution context
 and a scope inherited negative total_change 
 When the controller is instantiated 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should allow entrance" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrlShoudOpenSpec
 Given a controller execution context
 and a scope inherited zero total_change 
 When the controller is instantiated 
 Then">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t allow entrance" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrlShoudOpenSpec
 Given a controller execution context
 and a scope inherited positive total_change 
 When the controller is instantiated 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should have shouldOpen function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrl
 Given a controller execution context
 When the controller is instantiated 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should have shouldOpen function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrl
 Given a controller execution context
 When the controller is instantiated 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should have numberOfInstallmentsWatcherCallback function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrl
 Given a controller execution context
 When the controller is instantiated 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should have duedateWatcherCallback function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrl
 Given a controller execution context
 When the controller is instantiated 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should have recalcInstallments function in scope" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrl
 Given a controller execution context
 When the controller is instantiated 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should have confirmOnCuffPayment function in scope" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrl
 Given a controller execution context
 When the controller is instantiated 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should have onCuff variable in scope" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrl
 Given a controller execution context
 When the controller is instantiated 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should have TODAY variable in scope" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrl
 Given a controller execution context
 When the controller is instantiated 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should have a watcher on onCuff.duedate" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrl
 Given a controller execution context
 When the controller is instantiated 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should have a watcher on onCuff.duedate" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: PaymentOnCuffCtrl
 Given a controller execution context
 When the controller is instantiated 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should initialize the receivable" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: ReceivableCtrlAdd">
      <skipped/>
    </testcase>
    <testcase name="should register a receivable" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: ReceivableCtrlAdd">
      <skipped/>
    </testcase>
    <testcase name="should generate installments" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: ReceivableCtrlAdd">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: ReceivableListCtrl ReceivableListCtrl_receivableDateFilter">
      <skipped/>
    </testcase>
    <testcase name="returns true if receivable duedate is equal initial datetime" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: ReceivableListCtrl ReceivableListCtrl_receivableDateFilter">
      <skipped/>
    </testcase>
    <testcase name="returns true if receivable duedate is equal final datetime" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: ReceivableListCtrl ReceivableListCtrl_receivableDateFilter">
      <skipped/>
    </testcase>
    <testcase name="returns true if receivable duedate is greater than initial datetime and lower than final datetime" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: ReceivableListCtrl ReceivableListCtrl_receivableDateFilter">
      <skipped/>
    </testcase>
    <testcase name="returns false if receivable duedate is lower than initial datetime" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: ReceivableListCtrl ReceivableListCtrl_receivableDateFilter">
      <skipped/>
    </testcase>
    <testcase name="is set to current date on initialization" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: ReceivableListCtrl filtering initial date">
      <skipped/>
    </testcase>
    <testcase name="is always the latest" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: ReceivableListCtrl filtering final date">
      <skipped/>
    </testcase>
    <testcase name="is set to current date on initialization" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: ReceivableListCtrl filtering final date">
      <skipped/>
    </testcase>
    <testcase name="should isValid return true" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: ReceivableReceiveCtrl">
      <skipped/>
    </testcase>
    <testcase name="should isValid return false" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: ReceivableReceiveCtrl">
      <skipped/>
    </testcase>
    <testcase name="should valid if user is loggedIn" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: ReceivableCtrl">
      <skipped/>
    </testcase>
    <testcase name="should filter by entity" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: voucher-active">
      <skipped/>
    </testcase>
    <testcase name="should filter by type" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: voucher-active">
      <skipped/>
    </testcase>
    <testcase name="should filter by amount" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: voucher-active">
      <skipped/>
    </testcase>
    <testcase name="should filter by date" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: voucher-active">
      <skipped/>
    </testcase>
    <testcase name="should filter by entity" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: voucher-historic">
      <skipped/>
    </testcase>
    <testcase name="should filter by type" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: voucher-historic">
      <skipped/>
    </testcase>
    <testcase name="should filter by type" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: voucher-historic">
      <skipped/>
    </testcase>
    <testcase name="should filter by initial date" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: voucher-historic">
      <skipped/>
    </testcase>
    <testcase name="should filter by final date" time="0" classname="PhantomJS 1.9.7 (Windows 7).Controller: voucher-historic">
      <skipped/>
    </testcase>
    <testcase name="should make a customer name compliant" time="0" classname="PhantomJS 1.9.7 (Windows 7).Directive: upperCase">
      <skipped/>
    </testcase>
    <testcase name="should make a customer name compliant, even with numbers" time="0" classname="PhantomJS 1.9.7 (Windows 7).Directive: upperCase">
      <skipped/>
    </testcase>
    <testcase name="should make lowerCase text" time="0" classname="PhantomJS 1.9.7 (Windows 7).Directive: lowerCase">
      <skipped/>
    </testcase>
    <testcase name="Then should call the promise function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Directive: promiseClick
 Given a button with promiseClick directive 
 and function that returns a promise is passed
 and has no ng-click
 When the button is clicked
">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t log any warning" time="0" classname="PhantomJS 1.9.7 (Windows 7).Directive: promiseClick
 Given a button with promiseClick directive 
 and function that returns a promise is passed
 and has no ng-click
 When the button is clicked
">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t log any error" time="0" classname="PhantomJS 1.9.7 (Windows 7).Directive: promiseClick
 Given a button with promiseClick directive 
 and function that returns a promise is passed
 and has no ng-click
 When the button is clicked
">
      <skipped/>
    </testcase>
    <testcase name="Then should call the promise function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Directive: promiseClick
 Given a button with promiseClick directive 
 and function that returns a promise is passed
 and has ng-click
 When the button is clicked
">
      <skipped/>
    </testcase>
    <testcase name="should log warning" time="0" classname="PhantomJS 1.9.7 (Windows 7).Directive: promiseClick
 Given a button with promiseClick directive 
 and function that returns a promise is passed
 and has ng-click
 When the button is clicked
">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t log any error" time="0" classname="PhantomJS 1.9.7 (Windows 7).Directive: promiseClick
 Given a button with promiseClick directive 
 and function that returns a promise is passed
 and has ng-click
 When the button is clicked
">
      <skipped/>
    </testcase>
    <testcase name="Then should call the promise function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Directive: promiseClick
 Given a button with promiseClick directive 
 and function that returns a promise is not passed
 and has ng-click
 When the button is clicked
">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t log any warning" time="0" classname="PhantomJS 1.9.7 (Windows 7).Directive: promiseClick
 Given a button with promiseClick directive 
 and function that returns a promise is not passed
 and has ng-click
 When the button is clicked
">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t log any error" time="0" classname="PhantomJS 1.9.7 (Windows 7).Directive: promiseClick
 Given a button with promiseClick directive 
 and function that returns a promise is not passed
 and has ng-click
 When the button is clicked
">
      <skipped/>
    </testcase>
    <testcase name="Then should call the promise function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Directive: promiseClick
 Given a button with promiseClick directive 
 and function that returns a promise is not passed
 and has no ng-click
 When the button is clicked
">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t log any warning" time="0" classname="PhantomJS 1.9.7 (Windows 7).Directive: promiseClick
 Given a button with promiseClick directive 
 and function that returns a promise is not passed
 and has no ng-click
 When the button is clicked
">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t log any error" time="0" classname="PhantomJS 1.9.7 (Windows 7).Directive: promiseClick
 Given a button with promiseClick directive 
 and function that returns a promise is not passed
 and has no ng-click
 When the button is clicked
">
      <skipped/>
    </testcase>
    <testcase name="teste" time="0" classname="PhantomJS 1.9.7 (Windows 7).Directive: tntInput">
      <skipped/>
    </testcase>
    <testcase name="should make upperCase text" time="0" classname="PhantomJS 1.9.7 (Windows 7).Directive: upperCase">
      <skipped/>
    </testcase>
    <testcase name="should make an object with standard uuid into an human friendly code" time="0" classname="PhantomJS 1.9.7 (Windows 7).Filter: uuidCode">
      <skipped/>
    </testcase>
    <testcase name="should make an object with standard uuid into an human friendly code" time="0" classname="PhantomJS 1.9.7 (Windows 7).Filter: uuidCode">
      <skipped/>
    </testcase>
    <testcase name="should make an object with standard uuid into an human friendly code" time="0" classname="PhantomJS 1.9.7 (Windows 7).Filter: uuidCode">
      <skipped/>
    </testcase>
    <testcase name="should do something" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: AppointmentKeeper">
      <skipped/>
    </testcase>
    <testcase name="should create" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: AppointmentKeeperAddScenario">
      <skipped/>
    </testcase>
    <testcase name="should not add" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: AppointmentKeeperAddScenario">
      <skipped/>
    </testcase>
    <testcase name="should handle an add appointment appointment" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: AppointmentKeeper">
      <skipped/>
    </testcase>
    <testcase name="should add an appoitment" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: AppointmentKeeper">
      <skipped/>
    </testcase>
    <testcase name="return the correct appointment" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: AppointmentKeeperReadSpec">
      <skipped/>
    </testcase>
    <testcase name="return null" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: AppointmentKeeperReadSpec">
      <skipped/>
    </testcase>
    <testcase name="should update" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: AppointmentKeeperUpdateScenario">
      <skipped/>
    </testcase>
    <testcase name="should not update" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: AppointmentKeeperUpdateScenario">
      <skipped/>
    </testcase>
    <testcase name="should handle an update an appointment appointment" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: AppointmentKeeper">
      <skipped/>
    </testcase>
    <testcase name="should update" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: AppointmentKeeper">
      <skipped/>
    </testcase>
    <testcase name="should throw error" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: AppointmentKeeper">
      <skipped/>
    </testcase>
    <testcase name="should create two new book" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookKeeperAddSpec">
      <skipped/>
    </testcase>
    <testcase name="should nuke book entries" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookKeeperNukeSpec">
      <skipped/>
    </testcase>
    <testcase name="should create replace the current books with the snapshot" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookKeeperNukeSpec">
      <skipped/>
    </testcase>
    <testcase name="should create a new Check instance" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CheckEntity">
      <skipped/>
    </testcase>
    <testcase name="should create a new Check instance" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CheckEntity">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t create a new Check" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CheckEntity">
      <skipped/>
    </testcase>
    <testcase name="should add a check" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CheckKeeperAddSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t add a check, unexpected property" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CheckKeeperAddSpec">
      <skipped/>
    </testcase>
    <testcase name="should handle an add check event" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CheckKeeperAddSpec">
      <skipped/>
    </testcase>
    <testcase name="should handle an add check event" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CheckKeeperAddSpec">
      <skipped/>
    </testcase>
    <testcase name="should change the state of a check" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CheckKeeperChangeStateSpec">
      <skipped/>
    </testcase>
    <testcase name="should handle an changeState check event" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CheckKeeperChangeStateSpec">
      <skipped/>
    </testcase>
    <testcase name="should return the same entity" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CoinKeeperAddExpense">
      <skipped/>
    </testcase>
    <testcase name="should add a expense" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CoinKeeperAddExpense">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t add a expense" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CoinKeeperAddExpense">
      <skipped/>
    </testcase>
    <testcase name="should handle an add expense event" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CoinKeeperAddExpense">
      <skipped/>
    </testcase>
    <testcase name="should receive a payment to a expense" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CoinKeeperReceiveExpensesSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t receive a payment to a expense" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CoinKeeperReceiveExpensesSpec">
      <skipped/>
    </testcase>
    <testcase name="should handle a receive payment event" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CoinKeeperReceiveExpensesSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t handle a receive payment event" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CoinKeeperReceiveExpensesSpec">
      <skipped/>
    </testcase>
    <testcase name="should update a check" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CoinKeeperUpdateCheck">
      <skipped/>
    </testcase>
    <testcase name="should do something" time="0" classname="PhantomJS 1.9.7 (Windows 7).ConsultantKeeper">
      <skipped/>
    </testcase>
    <testcase name="should create" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ConsultantKeeperAddScenario">
      <skipped/>
    </testcase>
    <testcase name="should not add" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ConsultantKeeperAddScenario">
      <skipped/>
    </testcase>
    <testcase name="should handle an add consultant event" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ConsultantKeeper">
      <skipped/>
    </testcase>
    <testcase name="should add" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ConsultantKeeper">
      <skipped/>
    </testcase>
    <testcase name="return the correct consultant" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ConsultantKeeperReadSpec">
      <skipped/>
    </testcase>
    <testcase name="return null" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ConsultantKeeperReadSpec">
      <skipped/>
    </testcase>
    <testcase name="should update" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ConsultantKeeperUpdateScenario">
      <skipped/>
    </testcase>
    <testcase name="should throw exception" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ConsultantKeeperUpdateScenario">
      <skipped/>
    </testcase>
    <testcase name="should not update" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ConsultantKeeperUpdateScenario">
      <skipped/>
    </testcase>
    <testcase name="should handle an update consultant event" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ConsultantKeeper">
      <skipped/>
    </testcase>
    <testcase name="should update" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ConsultantKeeper">
      <skipped/>
    </testcase>
    <testcase name="should throw error" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ConsultantKeeper">
      <skipped/>
    </testcase>
    <testcase name="should do something" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: EntityKeeper">
      <skipped/>
    </testcase>
    <testcase name="should create" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: EntityKeeperAddScenario">
      <skipped/>
    </testcase>
    <testcase name="should not add" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: EntityKeeperAddScenario">
      <skipped/>
    </testcase>
    <testcase name="should handle an add entity event" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: EntityKeeper">
      <skipped/>
    </testcase>
    <testcase name="should add" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: EntityKeeper">
      <skipped/>
    </testcase>
    <testcase name="return the correct entity" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: EntityKeeperReadSpec">
      <skipped/>
    </testcase>
    <testcase name="return null" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: EntityKeeperReadSpec">
      <skipped/>
    </testcase>
    <testcase name="should update" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: EntityKeeperUpdateScenario">
      <skipped/>
    </testcase>
    <testcase name="should throw exception" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: EntityKeeperUpdateScenario">
      <skipped/>
    </testcase>
    <testcase name="should not update" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: EntityKeeperUpdateScenario">
      <skipped/>
    </testcase>
    <testcase name="should handle an update entity event" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: EntityKeeper">
      <skipped/>
    </testcase>
    <testcase name="should update" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: EntityKeeper">
      <skipped/>
    </testcase>
    <testcase name="should throw error" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: EntityKeeper">
      <skipped/>
    </testcase>
    <testcase name="should do something" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: GridKeeper">
      <skipped/>
    </testcase>
    <testcase name="should build a grid" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: GridKeeper">
      <skipped/>
    </testcase>
    <testcase name="should build an empty inventory" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: GridKeeper">
      <skipped/>
    </testcase>
    <testcase name="should build a grid" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: GridKeeper">
      <skipped/>
    </testcase>
    <testcase name="should build an empty inventory" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: GridKeeper">
      <skipped/>
    </testcase>
    <testcase name="should do something" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: InventoryKeeper">
      <skipped/>
    </testcase>
    <testcase name="should validate data" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: InventoryKeeper">
      <skipped/>
    </testcase>
    <testcase name="should has read only id" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: InventoryKeeper">
      <skipped/>
    </testcase>
    <testcase name="should do something" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Journalservice">
      <skipped/>
    </testcase>
    <testcase name="should compose" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: JournalKeeperCompose">
      <skipped/>
    </testcase>
    <testcase name="should fail to compose on a wrong instance type" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: JournalKeeperCompose">
      <skipped/>
    </testcase>
    <testcase name="should fail to compose on storage.persist failure" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: JournalKeeperCompose">
      <skipped/>
    </testcase>
    <testcase name="should fail to compose on replay failure" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: JournalKeeperCompose">
      <skipped/>
    </testcase>
    <testcase name="should log a fatal on persist failure" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: JournalKeeperCompose">
      <skipped/>
    </testcase>
    <testcase name="should log a fatal on replay failure" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: JournalKeeperCompose">
      <skipped/>
    </testcase>
    <testcase name="increments the sequence value by 1" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: JournalKeeperCompose">
      <skipped/>
    </testcase>
    <testcase name="should insert the entry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: JournalKeeperInsert">
      <skipped/>
    </testcase>
    <testcase name="should fail to insert on a wrong instance type" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: JournalKeeperInsert">
      <skipped/>
    </testcase>
    <testcase name="should fail to insert on storage.persist failure" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: JournalKeeperInsert">
      <skipped/>
    </testcase>
    <testcase name="should fail to insert on replay failure" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: JournalKeeperInsert">
      <skipped/>
    </testcase>
    <testcase name="should log a fatal on persist failure" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: JournalKeeperInsert">
      <skipped/>
    </testcase>
    <testcase name="should log a fatal on replay failure" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: JournalKeeperInsert">
      <skipped/>
    </testcase>
    <testcase name="updates sequence value if entry&apos;s value is higher than current sequence" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: JournalKeeperInsert">
      <skipped/>
    </testcase>
    <testcase name="does not update sequence value if entry&apos;s value is lower than current sequence" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: JournalKeeperInsert">
      <skipped/>
    </testcase>
    <testcase name="updates the entry in persistent storage" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: JournalKeeperMarkAsSynced">
      <skipped/>
    </testcase>
    <testcase name="logs an error if update fails" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: JournalKeeperMarkAsSynced">
      <skipped/>
    </testcase>
    <testcase name="clears journal entries from persistent storage" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: JournalKeeperNuke">
      <skipped/>
    </testcase>
    <testcase name="logs a fatal if nuke fails" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: JournalKeeperNuke">
      <skipped/>
    </testcase>
    <testcase name="gets oldest unsynced entry from persisted storage" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: JournalKeeperReadOldestUnsynced">
      <skipped/>
    </testcase>
    <testcase name="gets unsynced entries from persisted storage" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: JournalKeeperReadUnsynced">
      <skipped/>
    </testcase>
    <testcase name="removes the given entry using PersistentStorage" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: JournalKeeperRemove">
      <skipped/>
    </testcase>
    <testcase name="logs an error if removing an entry fails" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: JournalKeeperRemove">
      <skipped/>
    </testcase>
    <testcase name="stores the given journal entry in the persistent storage" time="0" classname="PhantomJS 1.9.7 (Windows 7).Keeper: JournalKeeper_compose() in a happy day">
      <skipped/>
    </testcase>
    <testcase name="updates entries&apos; sequence" time="0" classname="PhantomJS 1.9.7 (Windows 7).Keeper: JournalKeeper_compose() in a happy day">
      <skipped/>
    </testcase>
    <testcase name="replays the entry to its keeper" time="0" classname="PhantomJS 1.9.7 (Windows 7).Keeper: JournalKeeper_compose() in a happy day">
      <skipped/>
    </testcase>
    <testcase name="flags the given entry as synced" time="0" classname="PhantomJS 1.9.7 (Windows 7).Keeper: JournalKeeper_markAsSynced() scenario in happy day scenario">
      <skipped/>
    </testcase>
    <testcase name="gets the unsynced entries from persistent storage" time="0" classname="PhantomJS 1.9.7 (Windows 7).Keeper: JournalKeeper_readUnsynced() scenario in happy day scenario">
      <skipped/>
    </testcase>
    <testcase name="removes the given entry from persistent storage" time="0" classname="PhantomJS 1.9.7 (Windows 7).Keeper: JournalKeeper_remove() scenario Journal entry removal in happy day scenario">
      <skipped/>
    </testcase>
    <testcase name="should be acessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: MasterKeeper">
      <skipped/>
    </testcase>
    <testcase name="should initialize the necessary properties" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: MasterKeeper when creating a new instance of MasterKeeper">
      <skipped/>
    </testcase>
    <testcase name="should mark the sensitive properties as read only" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: MasterKeeper when creating a new instance of MasterKeeper">
      <skipped/>
    </testcase>
    <testcase name="should accept first letter lower case for dataType and eventOp" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: MasterKeeper when journalize is triggered">
      <skipped/>
    </testcase>
    <testcase name="should accept first letter upper case for dataType and eventOp" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: MasterKeeper when journalize is triggered">
      <skipped/>
    </testcase>
    <testcase name="should create entry with the proper date" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: MasterKeeper when journalize is triggered">
      <skipped/>
    </testcase>
    <testcase name="should create entry with the proper eventVersion" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: MasterKeeper when journalize is triggered">
      <skipped/>
    </testcase>
    <testcase name="should create entry with the proper event" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: MasterKeeper when journalize is triggered">
      <skipped/>
    </testcase>
    <testcase name="should call JournalKeeper.compose with the proper entry type" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: MasterKeeper when journalize is triggered">
      <skipped/>
    </testcase>
    <testcase name="should proxy the return from JorunalKeeper.compose" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: MasterKeeper when journalize is triggered">
      <skipped/>
    </testcase>
    <testcase name="should create a new Order instance" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderEntity">
      <skipped/>
    </testcase>
    <testcase name="should add an order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderKeeperAddScenario">
      <skipped/>
    </testcase>
    <testcase name="should not add a order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderKeeperAddScenario">
      <skipped/>
    </testcase>
    <testcase name="should add an order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderKeeperAddSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t add an order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderKeeperAddSpec">
      <skipped/>
    </testcase>
    <testcase name="should handle an add order event" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderKeeperAddSpec">
      <skipped/>
    </testcase>
    <testcase name="should cancel" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderKeeperCancelScenario">
      <skipped/>
    </testcase>
    <testcase name="should throw an exception" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderKeeperCancelScenario">
      <skipped/>
    </testcase>
    <testcase name="should cancel an order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderKeeperCancelSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t cancel an order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderKeeperCancelSpec">
      <skipped/>
    </testcase>
    <testcase name="should return list with 0 items" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderKeeperListScenario">
      <skipped/>
    </testcase>
    <testcase name="should return populated list with 4 items" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderKeeperListScenario">
      <skipped/>
    </testcase>
    <testcase name="should return populated list with 6 items" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderKeeperListScenario">
      <skipped/>
    </testcase>
    <testcase name="should return a list of orders" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderKeeperListSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t return a orders" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderKeeperListSpec">
      <skipped/>
    </testcase>
    <testcase name="should return a Order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderKeeperReadScenario">
      <skipped/>
    </testcase>
    <testcase name="should not return a Order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderKeeperReadScenario">
      <skipped/>
    </testcase>
    <testcase name="should return a order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderKeeperReadSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t return a order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderKeeperReadSpec">
      <skipped/>
    </testcase>
    <testcase name="should update an order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderKeeperUpdateItemQtySpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t update an order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderKeeperUpdateItemQtySpec">
      <skipped/>
    </testcase>
    <testcase name="should update" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderKeeperUpdateScenario">
      <skipped/>
    </testcase>
    <testcase name="should throw an exception" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderKeeperUpdateScenario">
      <skipped/>
    </testcase>
    <testcase name="should update an order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderKeeperUpdateSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t update an order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderKeeperUpdateSpec">
      <skipped/>
    </testcase>
    <testcase name="should creat a new ProductReturn entity" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ProductReturnFactorySpec">
      <skipped/>
    </testcase>
    <testcase name="should throw error" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ProductReturnFactorySpec">
      <skipped/>
    </testcase>
    <testcase name="should do something" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ProductReturnKeeper">
      <skipped/>
    </testcase>
    <testcase name="should throw error" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ProductReturnKeeperAddSpec">
      <skipped/>
    </testcase>
    <testcase name="should create a new PurchaseOrder instance" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderEntity">
      <skipped/>
    </testcase>
    <testcase name="should add a purchase-order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderKeeperAddSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t add a purchase-order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderKeeperAddSpec">
      <skipped/>
    </testcase>
    <testcase name="should handle an add purchase-order event" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderKeeperAddSpec">
      <skipped/>
    </testcase>
    <testcase name="should cancel a PurchaseOrder" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderKeeperCancelSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t cancel a PurchaseOrder" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderKeeperCancelSpec">
      <skipped/>
    </testcase>
    <testcase name="should return a list of purchaseOrders" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderKeeperListSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t return a purchaseOrder" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderKeeperListSpec">
      <skipped/>
    </testcase>
    <testcase name="should return a purchaseOrder" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderKeeperReadSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t return a purchaseOrder" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderKeeperReadSpec">
      <skipped/>
    </testcase>
    <testcase name="should create a new Schedule instance" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SchedulingEntity">
      <skipped/>
    </testcase>
    <testcase name="should add an schedule" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SchedulingKeeperAddSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t add an order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SchedulingKeeperAddSpec">
      <skipped/>
    </testcase>
    <testcase name="should handle an add order event" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SchedulingKeeperAddSpec">
      <skipped/>
    </testcase>
    <testcase name="should update an order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SchedulingKeeperUpdateSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t update an order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SchedulingKeeperUpdateSpec">
      <skipped/>
    </testcase>
    <testcase name="should do something" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StockKeeper">
      <skipped/>
    </testcase>
    <testcase name="add a new stock" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StockKeeperAddScenario">
      <skipped/>
    </testcase>
    <testcase name="update stock" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StockKeeperAddScenario">
      <skipped/>
    </testcase>
    <testcase name="should reject promise" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StockKeeperAddScenario">
      <skipped/>
    </testcase>
    <testcase name="should reject promise" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StockKeeperAddScenario">
      <skipped/>
    </testcase>
    <testcase name="add stock" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StockKeeperAddSpec">
      <skipped/>
    </testcase>
    <testcase name="handler add" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StockKeeperAddSpec">
      <skipped/>
    </testcase>
    <testcase name="handler add of existent stock" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StockKeeperAddSpec">
      <skipped/>
    </testcase>
    <testcase name="should creat a new Stock entity" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StockKeeperFactorySpec">
      <skipped/>
    </testcase>
    <testcase name="should throw error" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StockKeeperFactorySpec">
      <skipped/>
    </testcase>
    <testcase name="should cancel" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StockeeperRemoveScenario">
      <skipped/>
    </testcase>
    <testcase name="should reject promise" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StockeeperRemoveScenario">
      <skipped/>
    </testcase>
    <testcase name="remove stock" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StockKeeperRemoveSpec">
      <skipped/>
    </testcase>
    <testcase name="handler remove stock" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StockKeeperRemoveSpec">
      <skipped/>
    </testcase>
    <testcase name="handler throw error" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StockKeeperRemoveSpec">
      <skipped/>
    </testcase>
    <testcase name="should reserve new item" time="0" classname="PhantomJS 1.9.7 (Windows 7).StockeeperReserveScenario">
      <skipped/>
    </testcase>
    <testcase name="should reserve" time="0" classname="PhantomJS 1.9.7 (Windows 7).StockeeperReserveScenario">
      <skipped/>
    </testcase>
    <testcase name="reserve stock" time="0" classname="PhantomJS 1.9.7 (Windows 7).StockKeeperReserveSpec">
      <skipped/>
    </testcase>
    <testcase name="handler reserve" time="0" classname="PhantomJS 1.9.7 (Windows 7).StockKeeperReserveSpec">
      <skipped/>
    </testcase>
    <testcase name="handler reserve of existent reserved stock" time="0" classname="PhantomJS 1.9.7 (Windows 7).StockKeeperReserveSpec">
      <skipped/>
    </testcase>
    <testcase name="handler reserve of nonexistent stock" time="0" classname="PhantomJS 1.9.7 (Windows 7).StockKeeperReserveSpec">
      <skipped/>
    </testcase>
    <testcase name="should unreserve" time="0" classname="PhantomJS 1.9.7 (Windows 7).StockeeperUnreserveScenario">
      <skipped/>
    </testcase>
    <testcase name="should reject promise" time="0" classname="PhantomJS 1.9.7 (Windows 7).StockeeperUnreserveScenario">
      <skipped/>
    </testcase>
    <testcase name="unreserve stock" time="0" classname="PhantomJS 1.9.7 (Windows 7).StockKeeperUnreserveSpec">
      <skipped/>
    </testcase>
    <testcase name="handler unreserve" time="0" classname="PhantomJS 1.9.7 (Windows 7).StockKeeperUnreserveSpec">
      <skipped/>
    </testcase>
    <testcase name="handler unreserve of existent unreserved stock" time="0" classname="PhantomJS 1.9.7 (Windows 7).StockKeeperUnreserveSpec">
      <skipped/>
    </testcase>
    <testcase name="create a type" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: TypeKeeperAddScenario">
      <skipped/>
    </testcase>
    <testcase name="should add" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: TypeKeeper">
      <skipped/>
    </testcase>
    <testcase name="should add with the handler" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: TypeKeeper">
      <skipped/>
    </testcase>
    <testcase name="should add with the handler at separated places" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: TypeKeeper">
      <skipped/>
    </testcase>
    <testcase name="should throw error if the obj passed is not an Type" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: TypeKeeper">
      <skipped/>
    </testcase>
    <testcase name="should throw error if the argument is null" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: TypeKeeper">
      <skipped/>
    </testcase>
    <testcase name="should throw error if the argument is undefined" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: TypeKeeper">
      <skipped/>
    </testcase>
    <testcase name="should create a new Type entity" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: TypeKeeper">
      <skipped/>
    </testcase>
    <testcase name="should create a new Type entity even if null is passed at it&apos;s constructor" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: TypeKeeper">
      <skipped/>
    </testcase>
    <testcase name="should creat a new Type entity using a generic object" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: TypeKeeper">
      <skipped/>
    </testcase>
    <testcase name="should not creat a new Type entity using a generic object with less than the mandatory attributes" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: TypeKeeper">
      <skipped/>
    </testcase>
    <testcase name="should not creat a new Type entity using a generic object if it has more than the mandatory attributes" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: TypeKeeper">
      <skipped/>
    </testcase>
    <testcase name="should throw error without name" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: TypeKeeper">
      <skipped/>
    </testcase>
    <testcase name="should throw an error if the constructor recieves more than the mandatory parameters" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: TypeKeeper">
      <skipped/>
    </testcase>
    <testcase name="cancel a voucher" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeperCancelScenario">
      <skipped/>
    </testcase>
    <testcase name="should do something" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeperCancelSpec">
      <skipped/>
    </testcase>
    <testcase name="cancel a voucher" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeperCancelSpec">
      <skipped/>
    </testcase>
    <testcase name="handle a cancel of a voucher" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeperCancelSpec">
      <skipped/>
    </testcase>
    <testcase name="throw exception on cancel" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeperCancelSpec">
      <skipped/>
    </testcase>
    <testcase name="throw exception on cancel handler" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeperCancelSpec">
      <skipped/>
    </testcase>
    <testcase name="create a voucher" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeperCreateScenario">
      <skipped/>
    </testcase>
    <testcase name="should do something" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeper">
      <skipped/>
    </testcase>
    <testcase name="should create" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeper">
      <skipped/>
    </testcase>
    <testcase name="should not create a voucher with a impostor voucher" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeper">
      <skipped/>
    </testcase>
    <testcase name="should exist" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeperFactorySpec">
      <skipped/>
    </testcase>
    <testcase name="should not instanciate a voucher without amount" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeperFactorySpec">
      <skipped/>
    </testcase>
    <testcase name="should not instanciate a voucher with more than the needed params" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeperFactorySpec">
      <skipped/>
    </testcase>
    <testcase name="should instanciate a voucher" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeperFactorySpec">
      <skipped/>
    </testcase>
    <testcase name="should not instanciate a voucher without an id" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeperFactorySpec">
      <skipped/>
    </testcase>
    <testcase name="should instanciate a voucher with a generic object without all mandatory attributes" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeperFactorySpec">
      <skipped/>
    </testcase>
    <testcase name="should instanciate a voucher with a generic object with all mandatory attributes" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeperFactorySpec">
      <skipped/>
    </testcase>
    <testcase name="should not instanciate a voucher with a generic object with all mandatory attributes and more" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeperFactorySpec">
      <skipped/>
    </testcase>
    <testcase name="should not instanciate a voucher with a generic object with some mandatory attributes and more" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeperFactorySpec">
      <skipped/>
    </testcase>
    <testcase name="return list with 0 items" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeperListSpec">
      <skipped/>
    </testcase>
    <testcase name="return list with 2 items" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeperListSpec">
      <skipped/>
    </testcase>
    <testcase name="redeem a voucher" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeperRedeemScenario">
      <skipped/>
    </testcase>
    <testcase name="should do something" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeperRedeemSpec">
      <skipped/>
    </testcase>
    <testcase name="redeem - public call" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeperRedeemSpec">
      <skipped/>
    </testcase>
    <testcase name="handle a redeem - private call" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeperRedeemSpec">
      <skipped/>
    </testcase>
    <testcase name="throw exception - public call" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeperRedeemSpec">
      <skipped/>
    </testcase>
    <testcase name="throw exception - private call" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherKeeperRedeemSpec">
      <skipped/>
    </testcase>
    <testcase name="should create" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: AppointmentServiceAddScenario">
      <skipped/>
    </testcase>
    <testcase name="should create a appointment instance" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: AppointmentServiceAddSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t create a appointment instance" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: AppointmentServiceAddSpec">
      <skipped/>
    </testcase>
    <testcase name="should return full list copy" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: AppointmentServiceListSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t return full list copy" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: AppointmentServiceListSpec">
      <skipped/>
    </testcase>
    <testcase name="should list since 01/01/2000 upon 05/01/2000" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: AppointmentServiceListSpec">
      <skipped/>
    </testcase>
    <testcase name="must call appointmentkeeper" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: AppointmentServiceAddSpec">
      <skipped/>
    </testcase>
    <testcase name="should update a appointment instance" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: AppointmentServiceUpdateSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t update a appointment instance" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: AppointmentServiceUpdateSpec">
      <skipped/>
    </testcase>
    <testcase name="should done an appointment" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: AppointmentServiceUpdateSpec">
      <skipped/>
    </testcase>
    <testcase name="should cancel an appointment" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: AppointmentServiceUpdateSpec">
      <skipped/>
    </testcase>
    <testcase name="should remove an appointment" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: AppointmentServiceUpdateSpec">
      <skipped/>
    </testcase>
    <testcase name="should list with string" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should list with array" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should not list, non existing property" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should not list, property = ?" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should filter" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should filter 2" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should filter 0" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should filter with numbers" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should find without duplicated" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should find with numbers" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should not find, invalid array" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should not find, invalid property" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should not find, invalid value" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should not find, invalid value" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should throw" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should inner join" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should inner join with numbers" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should not join, property existing only on a1" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should not join, property existing only on a2" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should not join no matches" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should not join invalid property" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should not join, invalid property" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should not join null array" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should find the array of strings" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should find the array of strings with 2 values" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should find with numbers" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should list" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should list 2" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should not list" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should not list 2" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should list " time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should list with numbers" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ArrayUtils">
      <skipped/>
    </testcase>
    <testcase name="should create a deposit BookEntry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServiceDepositSpec When deposit is triggered">
      <skipped/>
    </testcase>
    <testcase name="should write in book with the right entry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServiceLiquidateSpec When type is CHECK">
      <skipped/>
    </testcase>
    <testcase name="should write in book with the right entry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServiceLiquidateSpec When type is CREDIT CARD">
      <skipped/>
    </testcase>
    <testcase name="should write in book with the right entry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServiceLiquidateSpec When type is ON CUFF">
      <skipped/>
    </testcase>
    <testcase name="should write in book with the right entry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServiceLiquidateSpec When type is invalid">
      <skipped/>
    </testcase>
    <testcase name="should write in book with the right entry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServiceNegotiationSpec When negotiation is triggered with amount &gt; 0">
      <skipped/>
    </testcase>
    <testcase name="should write in book with the right entry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServiceNegotiationSpec When negotiation is triggered with amount &lt; 0">
      <skipped/>
    </testcase>
    <testcase name="should create a product BookEntry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServiceOrderSpec">
      <skipped/>
    </testcase>
    <testcase name="should create a voucher BookEntry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServiceOrderSpec">
      <skipped/>
    </testcase>
    <testcase name="should create a gift card BookEntry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServiceOrderSpec">
      <skipped/>
    </testcase>
    <testcase name="should create all order BookEntries" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServiceOrderSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t create book entries" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServiceOrderSpec">
      <skipped/>
    </testcase>
    <testcase name="should create positive cash BookEntry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServicePaymentSpec">
      <skipped/>
    </testcase>
    <testcase name="should create negative cash BookEntry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServicePaymentSpec">
      <skipped/>
    </testcase>
    <testcase name="should create check BookEntry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServicePaymentSpec">
      <skipped/>
    </testcase>
    <testcase name="should create a credit card BookEntry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServicePaymentSpec">
      <skipped/>
    </testcase>
    <testcase name="should create a cuff BookEntry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServicePaymentSpec">
      <skipped/>
    </testcase>
    <testcase name="should create a cuff BookEntry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServicePaymentSpec">
      <skipped/>
    </testcase>
    <testcase name="should create a cuff BookEntry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServicePaymentSpec">
      <skipped/>
    </testcase>
    <testcase name="should create a gift card BookEntry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServicePaymentSpec">
      <skipped/>
    </testcase>
    <testcase name="should create a discount BookEntry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServicePaymentSpec">
      <skipped/>
    </testcase>
    <testcase name="should create a coupon BookEntry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServicePaymentSpec">
      <skipped/>
    </testcase>
    <testcase name="should create all BookEntries" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServicePaymentSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t create BookEntries" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServicePaymentSpec">
      <skipped/>
    </testcase>
    <testcase name="should create 2 entries with rigth fields" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServiceProductDeliverySpec When productDelivery is triggered">
      <skipped/>
    </testcase>
    <testcase name="should create a product BookEntry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServiceProductReturnSpec">
      <skipped/>
    </testcase>
    <testcase name="should create a deposit BookEntry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServiceDepositSpec When deposit is triggered">
      <skipped/>
    </testcase>
    <testcase name="should inject BookService properly" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServiceWriteSpec">
      <skipped/>
    </testcase>
    <testcase name="should write a book entry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServiceWriteSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t write a book entry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: BookServiceWriteSpec">
      <skipped/>
    </testcase>
    <testcase name="should find the address" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CepService">
      <skipped/>
    </testcase>
    <testcase name="should get status 500" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CepService">
      <skipped/>
    </testcase>
    <testcase name="should add a check" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CheckServiceAddSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t add a check" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CheckServiceAddSpec">
      <skipped/>
    </testcase>
    <testcase name="should add a check" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CheckServiceAddSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t add a check, invalid attributes" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CheckServiceAddSpec">
      <skipped/>
    </testcase>
    <testcase name="should change state of a check" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CheckServiceChangeStateScenario">
      <skipped/>
    </testcase>
    <testcase name="should change the state" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CheckServiceChangeStateSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t change the state, wrong uuid" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CheckServiceChangeStateSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t change the state, ilegal state transition" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CheckServiceChangeStateSpec">
      <skipped/>
    </testcase>
    <testcase name="should create" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ConsultantServiceAddScenario">
      <skipped/>
    </testcase>
    <testcase name="should create a consultant instance" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ConsultantServiceAddSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t create a consultant instance" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ConsultantServiceAddSpec">
      <skipped/>
    </testcase>
    <testcase name="should return full list copy" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ConsultantServiceListSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t return full list copy" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ConsultantServiceListSpec">
      <skipped/>
    </testcase>
    <testcase name="must call consultantKeeper" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ConsultantServiceAddSpec">
      <skipped/>
    </testcase>
    <testcase name="should update a consultant instance" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ConsultantServiceUpdateSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t update a consultant instance" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ConsultantServiceUpdateSpec">
      <skipped/>
    </testcase>
    <testcase name="should cancel the coupon with the passed id" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Coupon">
      <skipped/>
    </testcase>
    <testcase name="should not cancel any coupon with a negative id" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Coupon">
      <skipped/>
    </testcase>
    <testcase name="should not cancel any coupon with an id equals zero" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Coupon">
      <skipped/>
    </testcase>
    <testcase name="should not cancel any coupon with a undefined id" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Coupon">
      <skipped/>
    </testcase>
    <testcase name="should create a coupon" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CouponServiceCreateSpec">
      <skipped/>
    </testcase>
    <testcase name="should not create a coupon with negative value" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CouponServiceCreateSpec">
      <skipped/>
    </testcase>
    <testcase name="should create a coupon without a remark" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CouponServiceCreateSpec">
      <skipped/>
    </testcase>
    <testcase name="should not create a coupon without entity" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CouponServiceCreateSpec">
      <skipped/>
    </testcase>
    <testcase name="should list all the coupon" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Coupon">
      <skipped/>
    </testcase>
    <testcase name="should not list the the different types" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Coupon">
      <skipped/>
    </testcase>
    <testcase name="should redeem the coupon with the passed id" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Coupon">
      <skipped/>
    </testcase>
    <testcase name="should not redeem any coupon with a negative id" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Coupon">
      <skipped/>
    </testcase>
    <testcase name="should not redeem any coupon with an id equals zero" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Coupon">
      <skipped/>
    </testcase>
    <testcase name="should not redeem any coupon with a undefined id" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Coupon">
      <skipped/>
    </testcase>
    <testcase name="should not redeem a voucher with other than the correct type" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Coupon">
      <skipped/>
    </testcase>
    <testcase name="should validate the CPF" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CpfService">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t validate the CPF" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CpfService">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t validate the CPF" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CpfService">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t validate the CPF, less characters" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CpfService">
      <skipped/>
    </testcase>
    <testcase name="should create" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: EntityServiceAddScenario">
      <skipped/>
    </testcase>
    <testcase name="should create a entity instance" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: EntityServiceAddSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t create a entity instance" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: EntityServiceAddSpec">
      <skipped/>
    </testcase>
    <testcase name="should return full list copy" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: EntityServiceListSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t return full list copy" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: EntityServiceListSpec">
      <skipped/>
    </testcase>
    <testcase name="should list births 01/01/2000 upon 03/01/2000 " time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: EntityServiceListSpec">
      <skipped/>
    </testcase>
    <testcase name="must call entityKeeper" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: EntityServiceAddSpec">
      <skipped/>
    </testcase>
    <testcase name="should update a entity instance" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: EntityServiceUpdateSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t update a entity instance" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: EntityServiceUpdateSpec">
      <skipped/>
    </testcase>
    <testcase name="should validate a expense instance" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ExpenseServiceisValid">
      <skipped/>
    </testcase>
    <testcase name="should validate a expense instance" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ExpenseServiceisValid">
      <skipped/>
    </testcase>
    <testcase name="should return full list copy" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ExpenseServiceListSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t return full list copy" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ExpenseServiceListSpec">
      <skipped/>
    </testcase>
    <testcase name="should return a copy of a expense" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ExpenseServiceRead">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t return a copy of a expense" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ExpenseServiceRead">
      <skipped/>
    </testcase>
    <testcase name="should get status 0" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: GoPayGatewaySpec">
      <skipped/>
    </testcase>
    <testcase name="should get status -1" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: GoPayGatewaySpec">
      <skipped/>
    </testcase>
    <testcase name="should get -2" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: GoPayGatewaySpec">
      <skipped/>
    </testcase>
    <testcase name="should get status -3" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: GoPayGatewaySpec">
      <skipped/>
    </testcase>
    <testcase name="should get return an error" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: GoPayGatewaySpec">
      <skipped/>
    </testcase>
    <testcase name="should do something" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Gridkeeper">
      <skipped/>
    </testcase>
    <testcase name="should generate a valid UUID" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: IdentityService">
      <skipped/>
    </testcase>
    <testcase name="should return a valid UUID data with 2 digit data.id" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: IdentityService">
      <skipped/>
    </testcase>
    <testcase name="should return a valid UUID data with 3 digit data.id" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: IdentityService">
      <skipped/>
    </testcase>
    <testcase name="should return a valid UUID data with 4 digit data.id" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: IdentityService">
      <skipped/>
    </testcase>
    <testcase name="should fail to generate an UUID, op is too big" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: IdentityService">
      <skipped/>
    </testcase>
    <testcase name="should fail to generate an UUID, id is too big" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: IdentityService">
      <skipped/>
    </testcase>
    <testcase name="should create a Bundle" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: IntentServiceCreateBundleSpec">
      <skipped/>
    </testcase>
    <testcase name="should fire a overwriting warning " time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: IntentServiceCreateBundleSpec">
      <skipped/>
    </testcase>
    <testcase name="should add and update the price and inventory of am product" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: InventoryService">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t add inventory or update the price of a product" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: InventoryService">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t add inventory or update the price of a product" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: InventoryService">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t add inventory or update the price of a product" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: InventoryService">
      <skipped/>
    </testcase>
    <testcase name="should return the product whith the specified id" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: InventoryService">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t return the product whith the specified id" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: InventoryService">
      <skipped/>
    </testcase>
    <testcase name="should remove a certain quantity from an inventory item" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: InventoryService">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t remove a certain quantity from an inventory item" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: InventoryService">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t remove a certain quantity from an inventory item" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: InventoryService">
      <skipped/>
    </testcase>
    <testcase name="should return the product list" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: InventoryService">
      <skipped/>
    </testcase>
    <testcase name="should exists" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: KeyboardService">
      <skipped/>
    </testcase>
    <testcase name="should pass the call to the correct input destiny" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: KeyboardService">
      <skipped/>
    </testcase>
    <testcase name="should not pass the call to an undefined input" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: KeyboardService">
      <skipped/>
    </testcase>
    <testcase name="should do something" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: KeyboardService">
      <skipped/>
    </testcase>
    <testcase name="should&apos;t register an input without id" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: KeyboardService">
      <skipped/>
    </testcase>
    <testcase name="should register a full valid input" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: KeyboardService">
      <skipped/>
    </testcase>
    <testcase name="should register the openKeyboard function in the input" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: KeyboardService">
      <skipped/>
    </testcase>
    <testcase name="should register an input with prev" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: KeyboardService">
      <skipped/>
    </testcase>
    <testcase name="should register an input with next" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: KeyboardService">
      <skipped/>
    </testcase>
    <testcase name="should register an input withou prev or next" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: KeyboardService">
      <skipped/>
    </testcase>
    <testcase name="should do something" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: KeyboardService">
      <skipped/>
    </testcase>
    <testcase name="should set the currentfield with next input" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: KeyboardService">
      <skipped/>
    </testcase>
    <testcase name="should unset the currentfield" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: KeyboardService">
      <skipped/>
    </testcase>
    <testcase name="should do something" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: KeyboardService">
      <skipped/>
    </testcase>
    <testcase name="should set the currentfield with prev input" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: KeyboardService">
      <skipped/>
    </testcase>
    <testcase name="should keep the currentfield when prev is called and currentfield does not have a prev" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: KeyboardService">
      <skipped/>
    </testcase>
    <testcase name="should do something" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: KeyboardService">
      <skipped/>
    </testcase>
    <testcase name="should remove a registred input" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: KeyboardService">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t remove a registred input with an inexistent id" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: KeyboardService">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t remove nothing case the input has no id" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: KeyboardService">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount">
      <skipped/>
    </testcase>
    <testcase name="is an object" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _distributeByWeight()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _distributeByWeight()">
      <skipped/>
    </testcase>
    <testcase name="returns an array of numbers" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _distributeByWeight()">
      <skipped/>
    </testcase>
    <testcase name="returns weighted values" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _distributeByWeight()">
      <skipped/>
    </testcase>
    <testcase name="keeps the same order of the items" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _distributeByWeight()">
      <skipped/>
    </testcase>
    <testcase name="prevents rounding innacuracy by adjusting the item with largest value" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _distributeByWeight()">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _distributeItemDiscount()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _distributeItemDiscount()">
      <skipped/>
    </testcase>
    <testcase name="sets the item discount attr for each item" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _distributeItemDiscount()">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _distributeOrderDiscount()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _distributeOrderDiscount()">
      <skipped/>
    </testcase>
    <testcase name="sets the order discount attr for each item" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _distributeOrderDiscount()">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getItemsWithItemDiscount()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getItemsWithItemDiscount()">
      <skipped/>
    </testcase>
    <testcase name="returns an array" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getItemsWithItemDiscount()">
      <skipped/>
    </testcase>
    <testcase name="returns an empty array if there are no items with item discount" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getItemsWithItemDiscount()">
      <skipped/>
    </testcase>
    <testcase name="does not include items with 0 item discount" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getItemsWithItemDiscount()">
      <skipped/>
    </testcase>
    <testcase name="only returns items with item discount" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getItemsWithItemDiscount()">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getItemsWithOrderDiscount()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getItemsWithOrderDiscount()">
      <skipped/>
    </testcase>
    <testcase name="returns an array" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getItemsWithOrderDiscount()">
      <skipped/>
    </testcase>
    <testcase name="returns an empty array if there are no items with order discount" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getItemsWithOrderDiscount()">
      <skipped/>
    </testcase>
    <testcase name="does not include items with 0 order discount" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getItemsWithOrderDiscount()">
      <skipped/>
    </testcase>
    <testcase name="only returns items with order discount" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getItemsWithOrderDiscount()">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getTotalItemDiscount()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getTotalItemDiscount()">
      <skipped/>
    </testcase>
    <testcase name="returns a number" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getTotalItemDiscount()">
      <skipped/>
    </testcase>
    <testcase name="sums the value of all item discounts of the items in the list" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getTotalItemDiscount()">
      <skipped/>
    </testcase>
    <testcase name="returns 0 if there are no items with item discount" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getTotalItemDiscount()">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getTotalOrderDiscount()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getTotalOrderDiscount()">
      <skipped/>
    </testcase>
    <testcase name="returns a number" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getTotalOrderDiscount()">
      <skipped/>
    </testcase>
    <testcase name="sums the value of all order discounts of the items in the list" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getTotalOrderDiscount()">
      <skipped/>
    </testcase>
    <testcase name="returns 0 if there are no items with order discount" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getTotalOrderDiscount()">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getTotalDiscount()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getTotalDiscount()">
      <skipped/>
    </testcase>
    <testcase name="returns a number" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getTotalDiscount()">
      <skipped/>
    </testcase>
    <testcase name="sums the value of all discounts of the items in the list" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getTotalDiscount()">
      <skipped/>
    </testcase>
    <testcase name="returns 0 if there are no items with discount" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _getTotalDiscount()">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _setItemDiscount()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _setItemDiscount()">
      <skipped/>
    </testcase>
    <testcase name="sets the item discount to the given value" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _setItemDiscount()">
      <skipped/>
    </testcase>
    <testcase name="deletes the item discount attribute if set to null or undefined" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _setItemDiscount()">
      <skipped/>
    </testcase>
    <testcase name="removes order discount from the item if an item discount is set" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _setItemDiscount()">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _setOrderDiscount()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _setOrderDiscount()">
      <skipped/>
    </testcase>
    <testcase name="sets the order discount to the given value" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _setOrderDiscount()">
      <skipped/>
    </testcase>
    <testcase name="deletes the order discount attribute if set to null or undefined" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _setOrderDiscount()">
      <skipped/>
    </testcase>
    <testcase name="removes item discount from the item if an order discount is set" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _setOrderDiscount()">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _unsetitemdiscount()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _unsetitemdiscount()">
      <skipped/>
    </testcase>
    <testcase name="removes the item discount attribute" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _unsetitemdiscount()">
      <skipped/>
    </testcase>
    <testcase name="does nothing if item has no item discount" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _unsetitemdiscount()">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _unsetOrderDiscount()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _unsetOrderDiscount()">
      <skipped/>
    </testcase>
    <testcase name="removes the order discount attribute" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _unsetOrderDiscount()">
      <skipped/>
    </testcase>
    <testcase name="does nothing if item has no order discount" time="0" classname="PhantomJS 1.9.7 (Windows 7).Misplacedservice_discount _unsetOrderDiscount()">
      <skipped/>
    </testcase>
    <testcase name="should do something" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Numpadservice">
      <skipped/>
    </testcase>
    <testcase name="shallow: should detect removed properties" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Objectdiff">
      <skipped/>
    </testcase>
    <testcase name="shallow: should detect added properties" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Objectdiff">
      <skipped/>
    </testcase>
    <testcase name="shallow: should detect changed properties" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Objectdiff">
      <skipped/>
    </testcase>
    <testcase name="shallow: should detect deep equality" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Objectdiff">
      <skipped/>
    </testcase>
    <testcase name="shallow: should detect deep changes" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Objectdiff">
      <skipped/>
    </testcase>
    <testcase name="Should distribute discount coupom in all items." time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderListService_distributeDiscountCoupon">
      <skipped/>
    </testcase>
    <testcase name="Should distribute discount coupom in all items." time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderListService_distributeDiscountCoupon">
      <skipped/>
    </testcase>
    <testcase name="should return value of entry type" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderListService_getTotalByType">
      <skipped/>
    </testcase>
    <testcase name="should return total discount of an order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderListService_GetTotalDiscountByOrderSpec">
      <skipped/>
    </testcase>
    <testcase name="should initilize service" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderListService">
      <skipped/>
    </testcase>
    <testcase name="gets order from OrderKeeper.cancel()" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderServiceCancel">
      <skipped/>
    </testcase>
    <testcase name="removes custom properties from the order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderServiceClear">
      <skipped/>
    </testcase>
    <testcase name="resets the order to the contents from the template" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderServiceClear">
      <skipped/>
    </testcase>
    <testcase name="creates a new items list" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderServiceClear">
      <skipped/>
    </testcase>
    <testcase name="keeps the same object (references and bindings do not break)" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderServiceClear">
      <skipped/>
    </testcase>
    <testcase name="returns true if order has items" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderServiceIsValid">
      <skipped/>
    </testcase>
    <testcase name="returns false if order has no items" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderServiceIsValid">
      <skipped/>
    </testcase>
    <testcase name="returns true if order is valid" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderServiceIsValid">
      <skipped/>
    </testcase>
    <testcase name="returns false if order is not valid" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderServiceIsValid">
      <skipped/>
    </testcase>
    <testcase name="gets orders from OrderKeeper.list()" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderServiceList">
      <skipped/>
    </testcase>
    <testcase name="gets order from OrderKeeper.read()" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderServiceRead">
      <skipped/>
    </testcase>
    <testcase name="returns the validation result" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderServiceRegisterSpec">
      <skipped/>
    </testcase>
    <testcase name="initializes an order object" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderService">
      <skipped/>
    </testcase>
    <testcase name="sets a new items array in the order object" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderService">
      <skipped/>
    </testcase>
    <testcase name="gets order from OrderKeeper.update()" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderServiceUpdate">
      <skipped/>
    </testcase>
    <testcase name="" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OrderServiceUpdateOrderQty">
      <skipped/>
    </testcase>
    <testcase name="should create a new CheckPayment entity" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Payment">
      <skipped/>
    </testcase>
    <testcase name="should not create a new CheckPayment entity whith more than the expected quantity of parameters" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Payment">
      <skipped/>
    </testcase>
    <testcase name="should not create a new CheckPayment entity with less than the expected quantity of parameters" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Payment">
      <skipped/>
    </testcase>
    <testcase name="should be able to inject" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CreditCardPaymentServiceChargeSpec">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CreditCardPaymentServiceChargeSpec PaymentServiceCharge_charge()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CreditCardPaymentServiceChargeSpec PaymentServiceCharge_charge()">
      <skipped/>
    </testcase>
    <testcase name="should charge a credit card" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CreditCardPaymentServiceChargeSpec PaymentServiceCharge_charge() when called with valid paramenters">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t charge a credit card with rejected promise" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CreditCardPaymentServiceChargeSpec PaymentServiceCharge_charge() when called with valid paramenters">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t charge a credit card with an exception in sendCharges" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: CreditCardPaymentServiceChargeSpec PaymentServiceCharge_charge() when called with valid paramenters">
      <skipped/>
    </testcase>
    <testcase name="should return an one month increased date" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceBuildDueDateSpec
 Given a firstDueDate timestamp not being last day in a month
 and increase equals one
 When buildDueDate is called 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return more than one month increased date" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceBuildDueDateSpec
 Given a firstDueDate timestamp not being last day in a month
 and increase greater than one
 When buildDueDate is called 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return an one month increased date" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceBuildDueDateSpec
 Given a firstDueDate timestamp being last day in a month
  and one of months to increase When
">
      <skipped/>
    </testcase>
    <testcase name="should return more than one month increased date" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceBuildDueDateSpec
 Given a firstDueDate timestamp being last day in a month
  and more than one of months to increase When
">
      <skipped/>
    </testcase>
    <testcase name="should call buildDueDate" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceBuildInstallmentsSpec
 Given a valid firstDueDateTime 
 and positive amount 
 When and a numberOfInstallments equal to zero
 When buildInstallments is called 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call Misplacedservice.recalc" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceBuildInstallmentsSpec
 Given a valid firstDueDateTime 
 and positive amount 
 When and a numberOfInstallments equal to zero
 When buildInstallments is called 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return installments" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceBuildInstallmentsSpec
 Given a valid firstDueDateTime 
 and positive amount 
 When and a numberOfInstallments equal to zero
 When buildInstallments is called 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call buildDueDate" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceBuildInstallmentsSpec
 Given a valid firstDueDateTime 
 and positive amount 
 When and a numberOfInstallments equal to one
 When buildInstallments is called 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call Misplacedservice.recalc" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceBuildInstallmentsSpec
 Given a valid firstDueDateTime 
 and positive amount 
 When and a numberOfInstallments equal to one
 When buildInstallments is called 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return installments" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceBuildInstallmentsSpec
 Given a valid firstDueDateTime 
 and positive amount 
 When and a numberOfInstallments equal to one
 When buildInstallments is called 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call buildDueDate" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceBuildInstallmentsSpec
 Given a valid firstDueDateTime 
 and positive amount 
 When and a numberOfInstallments greater than one
 When buildInstallments is called 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call Misplacedservice.recalc" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceBuildInstallmentsSpec
 Given a valid firstDueDateTime 
 and positive amount 
 When and a numberOfInstallments greater than one
 When buildInstallments is called 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return installments" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceBuildInstallmentsSpec
 Given a valid firstDueDateTime 
 and positive amount 
 When and a numberOfInstallments greater than one
 When buildInstallments is called 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should search for the informed entity" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceBuildOnCuffRefSpec
 Given a valid remainingAmount 
 and a existing entityUUID
 and no onCuff payment previously inserted 
 When buildOnCuffRef is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should try to recover pre-existing onCuff payments" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceBuildOnCuffRefSpec
 Given a valid remainingAmount 
 and a existing entityUUID
 and no onCuff payment previously inserted 
 When buildOnCuffRef is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should build onCuff installments" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceBuildOnCuffRefSpec
 Given a valid remainingAmount 
 and a existing entityUUID
 and no onCuff payment previously inserted 
 When buildOnCuffRef is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return an onCuff object" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceBuildOnCuffRefSpec
 Given a valid remainingAmount 
 and a existing entityUUID
 and no onCuff payment previously inserted 
 When buildOnCuffRef is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should search for the informed entity" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceBuildOnCuffRefSpec
 Given a valid remainingAmount 
 and a existing entityUUID
 and no onCuff payment previously inserted 
 When buildOnCuffRef is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should try to recover pre-existing onCuff payments" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceBuildOnCuffRefSpec
 Given a valid remainingAmount 
 and a existing entityUUID
 and no onCuff payment previously inserted 
 When buildOnCuffRef is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t build onCuff installments" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceBuildOnCuffRefSpec
 Given a valid remainingAmount 
 and a existing entityUUID
 and no onCuff payment previously inserted 
 When buildOnCuffRef is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return an onCuff object" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceBuildOnCuffRefSpec
 Given a valid remainingAmount 
 and a existing entityUUID
 and no onCuff payment previously inserted 
 When buildOnCuffRef is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call Misplacedservice.calc" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceRecalcInstallmentsSpec
 Given an installment index 
 and an onCuffRef object 
 When recalcInstallments is called 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return installments from Misplacedservice.calc" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceRecalcInstallmentsSpec
 Given an installment index 
 and an onCuffRef object 
 When recalcInstallments is called 
 Then">
      <skipped/>
    </testcase>
    <testcase name="should clear previous entries in PaymentService" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceRegisterInstallmentSpec
 Given a list of valid onCuff installments
 When OnCuffPaymentService_registerInstallments is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should add new entries in PaymentService" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceRegisterInstallmentSpec
 Given a list of valid onCuff installments
 When OnCuffPaymentService_registerInstallments is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should clear previous entries in PaymentService" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceRegisterInstallmentSpec
 Given an empty list of onCuff installments
 When OnCuffPaymentService_registerInstallments is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t add new entries in PaymentService" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceRegisterInstallmentSpec
 Given an empty list of onCuff installments
 When OnCuffPaymentService_registerInstallments is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should clear previous entries in PaymentService" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceRegisterInstallmentSpec
 Given a list of onCuff installments 
 and it has an installment with invalid amount
 When OnCuffPaymentService_registerInstallments is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should add new entries in PaymentService" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: OnCuffPaymentServiceRegisterInstallmentSpec
 Given a list of onCuff installments 
 and it has an installment with invalid amount
 When OnCuffPaymentService_registerInstallments is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="adds all payments to the temporary payments list" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PaymentServiceAddAll">
      <skipped/>
    </testcase>
    <testcase name="throws an error if an invalid payment is given" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PaymentServiceAddAll">
      <skipped/>
    </testcase>
    <testcase name="should add a cash payment" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PaymentServiceAdd">
      <skipped/>
    </testcase>
    <testcase name="should add a check payment" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PaymentServiceAdd">
      <skipped/>
    </testcase>
    <testcase name="should add a credit card payment" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PaymentServiceAdd">
      <skipped/>
    </testcase>
    <testcase name="should add an exchange payment" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PaymentServiceAdd">
      <skipped/>
    </testcase>
    <testcase name="should add a coupon payment" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PaymentServiceAdd">
      <skipped/>
    </testcase>
    <testcase name="should add a onCuff payment" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PaymentServiceAdd">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t add a unknown payment" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PaymentServiceAdd">
      <skipped/>
    </testcase>
    <testcase name="clears all quantity data from PaymentService.persistedCoupons" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PaymentServiceClearCouponGiftVoucher">
      <skipped/>
    </testcase>
    <testcase name="removes custom attributes" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PaymentServiceClearCouponGiftVoucher">
      <skipped/>
    </testcase>
    <testcase name="does not break persistCouponQuantity()" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PaymentServiceClearCouponGiftVoucher">
      <skipped/>
    </testcase>
    <testcase name="returns true if there are persisted coupons" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PaymentServiceHasPersistedCoupons">
      <skipped/>
    </testcase>
    <testcase name="returns false if there are no persisted coupons" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PaymentServiceHasPersistedCoupons">
      <skipped/>
    </testcase>
    <testcase name="sets the quantity of coupons of a given amount" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PaymentServicePersistCouponQuantity">
      <skipped/>
    </testcase>
    <testcase name="removes entry from persistedCoupons if qty is set to 0" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PaymentServicePersistCouponQuantity">
      <skipped/>
    </testcase>
    <testcase name="should be there" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PersistentStorage_update">
      <skipped/>
    </testcase>
    <testcase name="should create a transaction if none has passed by" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PersistentStorage_update">
      <skipped/>
    </testcase>
    <testcase name="should call driver.update if everything is ok and NO transaction is passed by" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PersistentStorage_update">
      <skipped/>
    </testcase>
    <testcase name="should not update if nothing is passed by" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PersistentStorage_update">
      <skipped/>
    </testcase>
    <testcase name="should not update if the entity is not registred by" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PersistentStorage_update">
      <skipped/>
    </testcase>
    <testcase name="should not create a transaction if one has been passed by" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PersistentStorage_update">
      <skipped/>
    </testcase>
    <testcase name="should call driver.update if everything is ok and a transaction is passed by" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PersistentStorage_update">
      <skipped/>
    </testcase>
    <testcase name="should not update if something goes wrong" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PersistentStorage_update">
      <skipped/>
    </testcase>
    <testcase name="should register a entity" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PersistentStorageFactory">
      <skipped/>
    </testcase>
    <testcase name="should replace an already registered entity" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PersistentStorageFactory">
      <skipped/>
    </testcase>
    <testcase name="should persist a journal" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PersistentStorageFactory">
      <skipped/>
    </testcase>
    <testcase name="should find the persisted entity" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PersistentStorageFactory">
      <skipped/>
    </testcase>
    <testcase name="should list all entities from a bucket" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PersistentStorageFactory">
      <skipped/>
    </testcase>
    <testcase name="should remove a entity from the bucket" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PersistentStorageFactory">
      <skipped/>
    </testcase>
    <testcase name="should do something" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ProductLineUp">
      <skipped/>
    </testcase>
    <testcase name="should fail, invalid entity" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ProductReturnservice">
      <skipped/>
    </testcase>
    <testcase name="should fail, invalid product" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ProductReturnservice">
      <skipped/>
    </testcase>
    <testcase name="should fail, invalid quantity" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ProductReturnservice">
      <skipped/>
    </testcase>
    <testcase name="should fail, invalid price" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ProductReturnservice">
      <skipped/>
    </testcase>
    <testcase name="should call PurchaseOrderService.cancel" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCancelCurrentSpec
 Given purchase order with uuid
 and a successful PurchaseOrderService_cancel
 When cancelCurrent is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should clear current order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCancelCurrentSpec
 Given purchase order with uuid
 and a successful PurchaseOrderService_cancel
 When cancelCurrent is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call PurchaseOrderService.cancel" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCancelCurrentSpec
 Given purchase order with uuid
 and a rejected PurchaseOrderService_cancel
 When cancelCurrent is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return the rejection message comming from PurchaseOrderService.cancel" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCancelCurrentSpec
 Given purchase order with uuid
 and a rejected PurchaseOrderService_cancel
 When cancelCurrent is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t call PurchaseOrderService.cancel" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCancelCurrentSpec
 Given purchase order without uuid
 When cancelCurrent is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should clear current order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCancelCurrentSpec
 Given purchase order without uuid
 When cancelCurrent is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call PurchaseOrderService.saveCurrent" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCheckoutCurrentSpec
 Given purchase order with uuid
 and a successful PurchaseOrderService_saveCurrent
 When checkoutCurrent is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call PurchaseOrderService.saveCurrent" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCheckoutCurrentSpec
 Given purchase order with uuid
 and a rejected PurchaseOrderService_saveCurrent
 When checkoutCurrent is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t clear current order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCheckoutCurrentSpec
 Given purchase order with uuid
 and a rejected PurchaseOrderService_saveCurrent
 When checkoutCurrent is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return the rejection message comming from PurchaseOrderService.cancel" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCheckoutCurrentSpec
 Given purchase order with uuid
 and a rejected PurchaseOrderService_saveCurrent
 When checkoutCurrent is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return a new current purchase order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCreateNewSpec
 Given a ?
 When createNew is called
">
      <skipped/>
    </testcase>
    <testcase name="should be the same instance inside PurchaseOrderService" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCreateNewSpec
 Given a ?
 When createNew is called
">
      <skipped/>
    </testcase>
    <testcase name="should add product" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCreateNewSpec
 Given a new current PurchaseOrder
 When purchaseOrder_add is called
">
      <skipped/>
    </testcase>
    <testcase name="should add product" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCreateNewSpec
 Given a new current PurchaseOrder
 When purchaseOrder_add is called with the same product
">
      <skipped/>
    </testcase>
    <testcase name="should add product" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCreateNewSpec
 Given a new current PurchaseOrder
 When purchaseOrder_add is called twice
">
      <skipped/>
    </testcase>
    <testcase name="should remove product" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCreateNewSpec
 Given a new current PurchaseOrder
 When purchaseOrder_remove is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call PurchaseOrderKeeper.add" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCreateSpec
 Given a valid purchase order
 and the keeper returning a resolved promise
 When create is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return an uuid" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCreateSpec
 Given a valid purchase order
 and the keeper returning a resolved promise
 When create is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t call PurchaseOrderKeeper.add" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCreateSpec
 Given a valid purchase order
 and the keeper returning a rejected promise
 When create is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return the rejection message" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCreateSpec
 Given a valid purchase order
 and the keeper returning a rejected promise
 When create is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t call PurchaseOrderKeeper.add" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCreateSpec
 Given a invalid purchase order
 When create is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return the errors as parameters" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCreateSpec
 Given a invalid purchase order
 When create is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t call PurchaseOrderKeeper.add" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCreateSpec
 Given a purchase order with unmapped parameters
 When create is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return the errors as parameters" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCreateSpec
 Given a purchase order with unmapped parameters
 When create is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call PurchaseOrderKeeper.list" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceListSpec
 Given a list of purchase orders
 When list is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return the list comming from keeper" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceListSpec
 Given a list of purchase orders
 When list is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call PurchaseOrderKeeper.list" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceListSpec
 Given a error in PurchaseOrderKeeper_list that throws exception
 When list is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return the list comming from keeper" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceListSpec
 Given a error in PurchaseOrderKeeper_list that throws exception
 When list is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call PurchaseOrderService.update" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceSaveCurrentSpec
 Given purchase order with uuid
 and a successful PurchaseOrderService_update
 and the purchaseOrder is dirty
 When saveCurrent is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return uuid comming from PurchaseOrderService.update" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceSaveCurrentSpec
 Given purchase order with uuid
 and a successful PurchaseOrderService_update
 and the purchaseOrder is dirty
 When saveCurrent is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call PurchaseOrderService.update" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceSaveCurrentSpec
 Given purchase order with uuid
 and a rejected PurchaseOrderService_update
 and the purchaseOrder is dirty
 When saveCurrent is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t dirty the order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceSaveCurrentSpec
 Given purchase order with uuid
 and a rejected PurchaseOrderService_update
 and the purchaseOrder is dirty
 When saveCurrent is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return the rejection message comming from PurchaseOrderService.update" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceSaveCurrentSpec
 Given purchase order with uuid
 and a rejected PurchaseOrderService_update
 and the purchaseOrder is dirty
 When saveCurrent is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call PurchaseOrderService.create" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceSaveCurrentSpec
 Given purchase order without uuid
 and a successful PurchaseOrderService_create
 and the purchaseOrder is dirty
 When saveCurrent is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call PurchaseOrderService.update" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceSaveCurrentSpec
 Given purchase order without uuid
 and a rejected PurchaseOrderService_create
 and the purchaseOrder is dirty
 When saveCurrent is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t dirty the order" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceSaveCurrentSpec
 Given purchase order without uuid
 and a rejected PurchaseOrderService_create
 and the purchaseOrder is dirty
 When saveCurrent is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return the rejection message comming from PurchaseOrderService.create" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceSaveCurrentSpec
 Given purchase order without uuid
 and a rejected PurchaseOrderService_create
 and the purchaseOrder is dirty
 When saveCurrent is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call PurchaseOrderKeeper.update" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceUpdateSpec
 Given a valid purchase order
 and the keeper returning a resolved promise
 When update is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return an uuid" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceUpdateSpec
 Given a valid purchase order
 and the keeper returning a resolved promise
 When update is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t call PurchaseOrderKeeper.update" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceUpdateSpec
 Given a valid purchase order
 and the keeper returning a rejected promise
 When update is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return the rejection message" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceUpdateSpec
 Given a valid purchase order
 and the keeper returning a rejected promise
 When update is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t call PurchaseOrderKeeper.update" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceUpdateSpec
 Given a invalid purchase order
 When update is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return the errors as parameters" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceUpdateSpec
 Given a invalid purchase order
 When update is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t call PurchaseOrderKeeper.update" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceUpdateSpec
 Given a purchase order with unmapped parameters
 When update is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return the errors as parameters" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceUpdateSpec
 Given a purchase order with unmapped parameters
 When update is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call PurchaseOrderKeeper.cancel" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCancelSpec
 Given an existing purchase order uuid
 When cancel is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return the list comming from keeper" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCancelSpec
 Given an existing purchase order uuid
 When cancel is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call PurchaseOrderKeeper.cancel" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCancelSpec
 Given an inexisting purchase order uuid
 When cancel is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return the list comming from keeper" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceCancelSpec
 Given an inexisting purchase order uuid
 When cancel is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call PurchaseOrderKeeper.read" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceReadSpec
 Given a list of purchase orders
 When list is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return the list comming from keeper" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceReadSpec
 Given a list of purchase orders
 When list is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should call PurchaseOrderKeeper.read" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceReadSpec
 Given a error in PurchaseOrderKeeper_read that throws exception
 When list is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="should return the list comming from keeper" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceReadSpec
 Given a error in PurchaseOrderKeeper_read that throws exception
 When list is called
 Then">
      <skipped/>
    </testcase>
    <testcase name="filter the proper order with pending items" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceListPendingSpec">
      <skipped/>
    </testcase>
    <testcase name="filter the items with received property" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceListPendingSpec">
      <skipped/>
    </testcase>
    <testcase name="filter the items that received all products" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: PurchaseOrderServiceListPendingSpec">
      <skipped/>
    </testcase>
    <testcase name="should change a state from 1 to 2" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ReceivableServiceChangeStateScenario">
      <skipped/>
    </testcase>
    <testcase name="should change a state, from 2 to 1" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ReceivableServiceChangeStateScenario">
      <skipped/>
    </testcase>
    <testcase name="should change a state, from 3 to 4" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ReceivableServiceChangeStateScenario">
      <skipped/>
    </testcase>
    <testcase name="should return a copy of check" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ReceivableChangeStateSpec">
      <skipped/>
    </testcase>
    <testcase name="should return full list copy" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ReceivableServiceListSpec">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t return full list copy" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ReceivableServiceListSpec">
      <skipped/>
    </testcase>
    <testcase name="should return a list of checks only" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ReceivableServiceListSpec">
      <skipped/>
    </testcase>
    <testcase name="should return a copy of a receivable" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ReceivableServiceRead">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t return a copy of a receivable" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ReceivableServiceRead">
      <skipped/>
    </testcase>
    <testcase name="should return a copy of check" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ReceivableServiceRead">
      <skipped/>
    </testcase>
    <testcase name="should do something" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: RemoteSync">
      <skipped/>
    </testcase>
    <testcase name="should do something" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Replayer">
      <skipped/>
    </testcase>
    <testcase name="should register" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Replayer">
      <skipped/>
    </testcase>
    <testcase name="should throw" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Replayer">
      <skipped/>
    </testcase>
    <testcase name="should replay" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Replayer">
      <skipped/>
    </testcase>
    <testcase name="should throw with invalid object" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Replayer">
      <skipped/>
    </testcase>
    <testcase name="should send a coupon sms" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SMSService">
      <skipped/>
    </testcase>
    <testcase name="should send a giftcard sms" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SMSService">
      <skipped/>
    </testcase>
    <testcase name="should send a payment sms" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SMSService">
      <skipped/>
    </testcase>
    <testcase name="should send a voucher sms" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SMSService">
      <skipped/>
    </testcase>
    <testcase name="should not send a sms" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SMSService">
      <skipped/>
    </testcase>
    <testcase name="should send a voucher sms" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SMSService">
      <skipped/>
    </testcase>
    <testcase name="calls SchedulingKeeper.create() if order is valid" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SchedulingServiceSave">
      <skipped/>
    </testcase>
    <testcase name="returns true if order is valid" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SchedulingServiceIsValid">
      <skipped/>
    </testcase>
    <testcase name="returns false if order is not valid" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SchedulingServiceIsValid">
      <skipped/>
    </testcase>
    <testcase name="initializes an order object" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SchedulingService">
      <skipped/>
    </testcase>
    <testcase name="should add a product to the stock" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StockServiceAddSpec - When add is triggered">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t add a invalid product to the stock" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StockServiceAddSpec - When add is triggered">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t add a product rejected by the keeper" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StockServiceAddSpec - When add is triggered">
      <skipped/>
    </testcase>
    <testcase name="should return next id" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StorageService_getNextId">
      <skipped/>
    </testcase>
    <testcase name="should return next id=1" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StorageService_getNextId">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t return next id" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StorageService_getNextId">
      <skipped/>
    </testcase>
    <testcase name="should return a entity" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StorageService_get">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t return a entity, missing id" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StorageService_get">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t return a entity, missing storage" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StorageService_get">
      <skipped/>
    </testcase>
    <testcase name="should insert an entity" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StorageService_insert">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t insert an entity" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StorageService_insert">
      <skipped/>
    </testcase>
    <testcase name="should report a valid storage name" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StorageService_isValid">
      <skipped/>
    </testcase>
    <testcase name="should report an invalid storage name" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StorageService_isValid">
      <skipped/>
    </testcase>
    <testcase name="should report an empty storage name" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StorageService_isValid">
      <skipped/>
    </testcase>
    <testcase name="should return a entity list copy" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StorageService">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t return a entity list copy" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StorageService">
      <skipped/>
    </testcase>
    <testcase name="should delete a entity" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StorageService_remove">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t delete a missing entity" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StorageService_remove">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t delete an entity of a invalid storage" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StorageService_remove">
      <skipped/>
    </testcase>
    <testcase name="should update an entity" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StorageService_update">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t update an entity" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StorageService_update">
      <skipped/>
    </testcase>
    <testcase name="should report invalid storate" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: StorageService_update">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncDriver">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncDriver">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncDriver SyncDriver_save()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncDriver SyncDriver_save()">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncDriver SyncDriver_changePassword()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncDriver SyncDriver_changePassword()">
      <skipped/>
    </testcase>
    <testcase name="calls FirebaseSimpleLogin.prototype.changePassword" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncDriver SyncDriver_changePassword()">
      <skipped/>
    </testcase>
    <testcase name="passes the right arguments to FirebaseSimpleLogin.changePassword" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncDriver SyncDriver_changePassword()">
      <skipped/>
    </testcase>
    <testcase name="returns a then-able" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncDriver SyncDriver_changePassword()">
      <skipped/>
    </testcase>
    <testcase name="resolves the promise if no error is passed to the callback" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncDriver SyncDriver_changePassword()">
      <skipped/>
    </testcase>
    <testcase name="rejects the promise if an error is passed to the callback" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncDriver SyncDriver_changePassword()">
      <skipped/>
    </testcase>
    <testcase name="passes the error message to the promise" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncDriver SyncDriver_changePassword()">
      <skipped/>
    </testcase>
    <testcase name="rejects the promise if a connection to Firebase was not established" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncDriver SyncDriver_changePassword()">
      <skipped/>
    </testcase>
    <testcase name="checks that a password has a minimum length" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncDriver SyncDriver_changePassword() password strength check">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncDriverIsConnectedScenario">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncDriverIsConnectedScenario">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncDriverIsConnectedScenario SyncDriver_isConnected()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncDriverIsConnectedScenario SyncDriver_isConnected()">
      <skipped/>
    </testcase>
    <testcase name="isConnected should return false" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncDriverIsConnectedScenario when triggered SyncDriver_login with invalid user and invalid password">
      <skipped/>
    </testcase>
    <testcase name="isConnected should return true" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncDriverIsConnectedScenario when triggered SyncDriver_login with valid user and valid password">
      <skipped/>
    </testcase>
    <testcase name="isConnected should be false" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncDriverIsConnectedScenario When user login and then logout">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceInsertSpec SyncService_insert()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceInsertSpec SyncService_insert()">
      <skipped/>
    </testcase>
    <testcase name="inserts the entry in the journal" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceInsertSpec SyncService_insert()">
      <skipped/>
    </testcase>
    <testcase name="does not inserts the received entry in the journal" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceInsertSpec SyncService_insert() existing local entry">
      <skipped/>
    </testcase>
    <testcase name="stashes the unsynced entries" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceInsertSpec SyncService_insert() conflicting sequence number">
      <skipped/>
    </testcase>
    <testcase name="inserts the received entry" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceInsertSpec SyncService_insert() conflicting sequence number">
      <skipped/>
    </testcase>
    <testcase name="unstashes the stashed entries" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceInsertSpec SyncService_insert() conflicting sequence number">
      <skipped/>
    </testcase>
    <testcase name="returns a promise" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceInsertSpec SyncService_insert() conflicting sequence number">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncService">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncService">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncService SyncService_getStashedEntries()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncService SyncService_getStashedEntries()">
      <skipped/>
    </testcase>
    <testcase name="returns an emtpy array if there&apos;s no stash" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncService SyncService_getStashedEntries()">
      <skipped/>
    </testcase>
    <testcase name="returns a shallow copy of the stash" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncService SyncService_getStashedEntries()">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceStashEntries SyncService_stashEntries()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceStashEntries SyncService_stashEntries()">
      <skipped/>
    </testcase>
    <testcase name="gets unsynced entries from the journal" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceStashEntries SyncService_stashEntries()">
      <skipped/>
    </testcase>
    <testcase name="stores entries in the stash" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceStashEntries SyncService_stashEntries()">
      <skipped/>
    </testcase>
    <testcase name="removes entries from the journal" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceStashEntries SyncService_stashEntries()">
      <skipped/>
    </testcase>
    <testcase name="returns a promise" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceStashEntries SyncService_stashEntries()">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceSync SyncService_sync()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceSync SyncService_sync()">
      <skipped/>
    </testcase>
    <testcase name="has the MAX_SYNC_ATTEMPTS config set" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceSync SyncService_sync()">
      <skipped/>
    </testcase>
    <testcase name="flags the service as syncing" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceSync SyncService_sync()">
      <skipped/>
    </testcase>
    <testcase name="gets the oldest unsynced entry from the journal keeper" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceSync SyncService_sync() happy day">
      <skipped/>
    </testcase>
    <testcase name="sends the entry to the sync driver" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceSync SyncService_sync() happy day">
      <skipped/>
    </testcase>
    <testcase name="marks the entry as synced" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceSync SyncService_sync() happy day">
      <skipped/>
    </testcase>
    <testcase name="removes the syncing flag from the service when done" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceSync SyncService_sync() happy day">
      <skipped/>
    </testcase>
    <testcase name="logs an error" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceSync SyncService_sync() fail to get unsynced entries">
      <skipped/>
    </testcase>
    <testcase name="removes the syncing flag from the service" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceSync SyncService_sync() fail to get unsynced entries">
      <skipped/>
    </testcase>
    <testcase name="makes MAX_SYNC_ATTEMPTS attempts to sync" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceSync SyncService_sync() fail to get unsynced entries">
      <skipped/>
    </testcase>
    <testcase name="logs an error" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceSync SyncService_sync() fail to sync with server">
      <skipped/>
    </testcase>
    <testcase name="removes the syncing flag from the service" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceSync SyncService_sync() fail to sync with server">
      <skipped/>
    </testcase>
    <testcase name="makes MAX_SYNC_ATTEMPTS attempts to sync" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceSync SyncService_sync() fail to sync with server">
      <skipped/>
    </testcase>
    <testcase name="logs a fatal failure!" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceSync SyncService_sync() fail to mark as synced">
      <skipped/>
    </testcase>
    <testcase name="removes the syncing flag from the service" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceSync SyncService_sync() fail to mark as synced">
      <skipped/>
    </testcase>
    <testcase name="makes MAX_SYNC_ATTEMPTS attempts to sync" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceSync SyncService_sync() fail to mark as synced">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceUnstashEntries SyncService_unstashEntries()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceUnstashEntries SyncService_unstashEntries()">
      <skipped/>
    </testcase>
    <testcase name="composes all stashed entries" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceUnstashEntries SyncService_unstashEntries()">
      <skipped/>
    </testcase>
    <testcase name="clears the stash" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceUnstashEntries SyncService_unstashEntries()">
      <skipped/>
    </testcase>
    <testcase name="returns a promise" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceUnstashEntries SyncService_unstashEntries()">
      <skipped/>
    </testcase>
    <testcase name="returns a resolved promise if there&apos;s nothing in the stash" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceUnstashEntries SyncService_unstashEntries()">
      <skipped/>
    </testcase>
    <testcase name="stores only the expeted entries in Firebase" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: SyncServiceInsertScenario happy day">
      <skipped/>
    </testcase>
    <testcase name="should not create Timer" time="0.005" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService"/>
    <testcase name="is accessible" time="0.001" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService"/>
    <testcase name="is a function" time="0.001" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService"/>
    <testcase name="is accessible" time="0.001" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService TimerService_timers"/>
    <testcase name="is an object" time="0.001" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService TimerService_timers"/>
    <testcase name="is accessible" time="0.001" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService TimerService_startTimer()"/>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService TimerService_startTimer()"/>
    <testcase name="returns a Timer object" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService TimerService_startTimer()"/>
    <testcase name="logs a message if starting multiple timers with the same id" time="0.002" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService TimerService_startTimer()"/>
    <testcase name="does not stop the running timer when id is already in use" time="0.001" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService TimerService_startTimer()"/>
    <testcase name="Timer already runnning" time="0.001" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService TimerService_startTimer()"/>
    <testcase name="Getting elapsed time for a running timer" time="0.001" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService TimerService_startTimer()"/>
    <testcase name="Timer already stopped" time="0.001" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService TimerService_stopTimer()"/>
    <testcase name="has already been stopped" time="0.001" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService TimerService_stopTimer()"/>
    <testcase name="is accessible" time="0.001" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService TimerService_stopTimer()"/>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService TimerService_stopTimer()"/>
    <testcase name="stops the timer with the given id" time="0.001" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService TimerService_stopTimer()"/>
    <testcase name="does not stop other timers" time="0.001" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService TimerService_stopTimer()"/>
    <testcase name="logs a message if timer does not exist" time="0.001" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService TimerService_stopTimer()"/>
    <testcase name="logs a message with data when timer is stopped" time="0.001" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService TimerService_stopTimer()"/>
    <testcase name="logs a fatal if process took more than 100ms" time="0.001" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService TimerService_stopTimer()"/>
    <testcase name="removes timer from timers list" time="0.001" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService TimerService_stopTimer()"/>
    <testcase name="is accessible" time="0.001" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService TimerService_clearTimers()"/>
    <testcase name="is a function" time="0.001" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService TimerService_clearTimers()"/>
    <testcase name="stops running timers" time="0.001" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService TimerService_clearTimers()"/>
    <testcase name="removes all timers from timers list" time="0.001" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService TimerService_clearTimers()"/>
    <testcase name="Timer runned for elapsedTime" time="0.001" classname="PhantomJS 1.9.7 (Windows 7).Service: TimerService"/>
    <testcase name="should return a resolved promise" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherServiceSpec When no vouchers are passed">
      <skipped/>
    </testcase>
    <testcase name="should cancel" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherServiceCancelSpec">
      <skipped/>
    </testcase>
    <testcase name="should fail, voucher not found" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherServiceCancelSpec">
      <skipped/>
    </testcase>
    <testcase name="should fail, already redeemed" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: VoucherServiceCancelSpec">
      <skipped/>
    </testcase>
    <testcase name="should redeem" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Voucherservice">
      <skipped/>
    </testcase>
    <testcase name="should fail to redeem, voucher not found" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Voucherservice">
      <skipped/>
    </testcase>
    <testcase name="should fail to redeem, already canceled" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Voucherservice">
      <skipped/>
    </testcase>
    <testcase name="should fail to redeem, already redeemed" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Voucherservice">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService">
      <skipped/>
    </testcase>
    <testcase name="is an object" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _local">
      <skipped/>
    </testcase>
    <testcase name="is an object" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _local">
      <skipped/>
    </testcase>
    <testcase name="gets data stored in localStorage if any" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _local">
      <skipped/>
    </testcase>
    <testcase name="is an empty object if no data has been stored" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _local">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _getLocalData()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _getLocalData()">
      <skipped/>
    </testcase>
    <testcase name="gets the data from localStorage" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _getLocalData()">
      <skipped/>
    </testcase>
    <testcase name="parses the data" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _getLocalData()">
      <skipped/>
    </testcase>
    <testcase name="returns an empty object if no data is set" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _getLocalData()">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setLocalData()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setLocalData()">
      <skipped/>
    </testcase>
    <testcase name="stores a warmup object in localStorage" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setLocalData()">
      <skipped/>
    </testcase>
    <testcase name="stringifies data before storing" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setLocalData()">
      <skipped/>
    </testcase>
    <testcase name="updates the .local attribute" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setLocalData()">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _updateLocalData()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _updateLocalData()">
      <skipped/>
    </testcase>
    <testcase name="returns a promise" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _updateLocalData()">
      <skipped/>
    </testcase>
    <testcase name="gets data for the given timestamp from remote storage" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _updateLocalData()">
      <skipped/>
    </testcase>
    <testcase name="sets local data" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _updateLocalData() when data is found">
      <skipped/>
    </testcase>
    <testcase name="resolves the promise" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _updateLocalData() when data is found">
      <skipped/>
    </testcase>
    <testcase name="passes the timestamp to the promise resolution" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _updateLocalData() when data is found">
      <skipped/>
    </testcase>
    <testcase name="broadcasts the LocalWarmupDataUpdated event" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _updateLocalData() when data is found">
      <skipped/>
    </testcase>
    <testcase name="logs a fatal" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _updateLocalData() when data is not found">
      <skipped/>
    </testcase>
    <testcase name="rejects the returned promise if no data is found" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _updateLocalData() when data is not found">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="returns a promise" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="sets remote data for the given timestamp" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="does not set remote data if data for the given timestamp already exists" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="rejects the promise if unable to store the data" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="rejects the promise if data already exists" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="resolves the promise when data is stored" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="passes a timestamp when promise is resolved" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setRemoteTimestamp()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setRemoteTimestamp()">
      <skipped/>
    </testcase>
    <testcase name="returns a promise" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setRemoteTimestamp()">
      <skipped/>
    </testcase>
    <testcase name="sets the timestamp attribute in the given reference" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setRemoteTimestamp()">
      <skipped/>
    </testcase>
    <testcase name="sets the timestamp if it is newer than the one already stored" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setRemoteTimestamp()">
      <skipped/>
    </testcase>
    <testcase name="resolves the promise if the timestamp is newer than the one already stored" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setRemoteTimestamp()">
      <skipped/>
    </testcase>
    <testcase name="sets the timestamp if there&apos;s no timestamp set" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setRemoteTimestamp()">
      <skipped/>
    </testcase>
    <testcase name="resolves the promise if there&apos;s no timestamp set" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setRemoteTimestamp()">
      <skipped/>
    </testcase>
    <testcase name="does not set the timestamp if it is older than the one stored" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setRemoteTimestamp()">
      <skipped/>
    </testcase>
    <testcase name="rejects the promise if the timestamp is older than the one stored" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setRemoteTimestamp()">
      <skipped/>
    </testcase>
    <testcase name="does not set the timestamp if it is equal the one stored" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setRemoteTimestamp()">
      <skipped/>
    </testcase>
    <testcase name="resolves the promise if the timestamp is equal the one stored" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setRemoteTimestamp()">
      <skipped/>
    </testcase>
    <testcase name="rejects the promise if unable to store the timestamp" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _setRemoteTimestamp()">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _updateRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _updateRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="returns a promise" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _updateRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="rejects the promise if no reference is given" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _updateRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="rejects the promise if no timestamp is given" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _updateRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="sets the remote data for the given timestamp" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _updateRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="sets the remote timestamp once the data is set for it" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _updateRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="does not set the remote timestamp if it fails to store the data" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _updateRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="broadcasts the RemoteWarmupDataUpdated event when the remote timestamp is set" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _updateRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="does not broadcasts the event if failed to set remote timestamp" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _updateRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="does not broadcasts the event if failed to set remote data" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _updateRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="is accessible" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _watchRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="is a function" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _watchRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="does nothing if no reference is given" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _watchRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="logs an error if no reference is given" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _watchRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="listens to change on the remote timestamp" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _watchRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="updates local data when local data is not set" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _watchRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="updates local data when remote timestamp is newer" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _watchRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="updates remote data when remote data is not set" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _watchRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="updates remote data when local timestamp is newer" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _watchRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="does nothing if nor local nor remote data are set" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _watchRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="does nothing if local and remote timestamps are the same" time="0" classname="PhantomJS 1.9.7 (Windows 7).WarmupService _watchRemoteData()">
      <skipped/>
    </testcase>
    <testcase name="should be there" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_transaction">
      <skipped/>
    </testcase>
    <testcase name="should create bucket" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_transaction">
      <skipped/>
    </testcase>
    <testcase name="should fail with wrong metaVersion" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_transaction">
      <skipped/>
    </testcase>
    <testcase name="should be there" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_dropBucket">
      <skipped/>
    </testcase>
    <testcase name="should drop bucket" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_dropBucket">
      <skipped/>
    </testcase>
    <testcase name="should be there" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_find">
      <skipped/>
    </testcase>
    <testcase name="should return a object" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_find">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t return a object" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_find">
      <skipped/>
    </testcase>
    <testcase name="should throw an error" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_find">
      <skipped/>
    </testcase>
    <testcase name="should be there" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_list">
      <skipped/>
    </testcase>
    <testcase name="should return a list with objects without parameters" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_list">
      <skipped/>
    </testcase>
    <testcase name="should return a list with objects with parameters" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_list">
      <skipped/>
    </testcase>
    <testcase name="should be there" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_persist">
      <skipped/>
    </testcase>
    <testcase name="should persist right at bucket with anyorder of attributes" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_persist">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t persist if the key already exists at the bucket" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_persist">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t persist at bucket without a key" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_persist">
      <skipped/>
    </testcase>
    <testcase name="should persist at bucket with a key" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_persist">
      <skipped/>
    </testcase>
    <testcase name="should persist if the number of columns does not fits the bucket attributes" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_persist">
      <skipped/>
    </testcase>
    <testcase name="shouldn&apos;t persist if the columns&apos;s labels are different from the bucket&apos;s" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_persist">
      <skipped/>
    </testcase>
    <testcase name="should be here" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_remove">
      <skipped/>
    </testcase>
    <testcase name="should remove an object" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_remove">
      <skipped/>
    </testcase>
    <testcase name="should remove an object" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_remove">
      <skipped/>
    </testcase>
    <testcase name="should remove an object" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_remove">
      <skipped/>
    </testcase>
    <testcase name="should not remove an object" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_remove">
      <skipped/>
    </testcase>
    <testcase name="should not remove an object" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_remove">
      <skipped/>
    </testcase>
    <testcase name="should be there" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_transaction">
      <skipped/>
    </testcase>
    <testcase name="should resolve transaction" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_transaction">
      <skipped/>
    </testcase>
    <testcase name="should resolve transaction with failure" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_transaction">
      <skipped/>
    </testcase>
    <testcase name="should be there" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_update">
      <skipped/>
    </testcase>
    <testcase name="should update a bucket&apos;s item" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_update">
      <skipped/>
    </testcase>
    <testcase name="should update more than one bucket&apos;s item with a partial object" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_update">
      <skipped/>
    </testcase>
    <testcase name="should not update if the parameters object is not passed" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_update">
      <skipped/>
    </testcase>
    <testcase name="should not update if the parameters object has an invalid propriety" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_update">
      <skipped/>
    </testcase>
    <testcase name="should not update if the update object have some invalid parameters" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_update">
      <skipped/>
    </testcase>
    <testcase name="should not update an inexistent bucket&apos;s item" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: WebSQLDriver_update">
      <skipped/>
    </testcase>
    <testcase name="should do something" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: FinancialMathService">
      <skipped/>
    </testcase>
    <testcase name="should do something" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Log">
      <skipped/>
    </testcase>
    <testcase name="should do something" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Misplacedservice">
      <skipped/>
    </testcase>
    <testcase name="should calc" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Misplacedservice">
      <skipped/>
    </testcase>
    <testcase name="should calc neg" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Misplacedservice">
      <skipped/>
    </testcase>
    <testcase name="should recalc" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Misplacedservice">
      <skipped/>
    </testcase>
    <testcase name="should not crash" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: Misplacedservice">
      <skipped/>
    </testcase>
    <testcase name="should do something" time="0" classname="PhantomJS 1.9.7 (Windows 7).Service: ReportService">
      <skipped/>
    </testcase>
    <system-out><![CDATA[
]]></system-out>
    <system-err/>
  </testsuite>
</testsuites>
